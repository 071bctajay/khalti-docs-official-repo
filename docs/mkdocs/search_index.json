{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Khalti Merchant API documentation.\n\n\nIntroduction\n\n\nKhalti is the new generation Payment Gateway, Digital Wallet and API provider for various services. \nWe provide you with true Payment Gateway, where you can accepts payments from:\n\n\n\n\nKhalti User\n\n\nNet Banking customers of our partner banks (need not be Khalti user)\n\n\n\n\nFeatures\n\n\n\n\nHighly secure\n\n\nEasy to accept payments\n\n\nIncase of wallet payment, Customer can pay from your software directly without redirecting to our website.\n\n\nNetbanking users can choose their bank and make payment.\n\n\nNo hassle to integrate with individual banks\n\n\nTransaction List, with the feature of issuing refund, filtering and download report.\n\n\nMulti user system\n\n\nRealtime balance\n\n\nWithdraw fund\n\n\n\n\nFor Queries, feel free to call us at 9801165568 or email merchantapi@khalti.com\n\n\nGetting Started", 
            "title": "Welcome"
        }, 
        {
            "location": "/#introduction", 
            "text": "Khalti is the new generation Payment Gateway, Digital Wallet and API provider for various services. \nWe provide you with true Payment Gateway, where you can accepts payments from:   Khalti User  Net Banking customers of our partner banks (need not be Khalti user)", 
            "title": "Introduction"
        }, 
        {
            "location": "/#features", 
            "text": "Highly secure  Easy to accept payments  Incase of wallet payment, Customer can pay from your software directly without redirecting to our website.  Netbanking users can choose their bank and make payment.  No hassle to integrate with individual banks  Transaction List, with the feature of issuing refund, filtering and download report.  Multi user system  Realtime balance  Withdraw fund   For Queries, feel free to call us at 9801165568 or email merchantapi@khalti.com", 
            "title": "Features"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/", 
            "text": "There are four steps for integrating Khalti payment to a merchant system.\n\n\n\n\n1. Signup as merchant\n\n\n2. Understand how khalti payment works\n\n\n3. Test integration\n\n\n3.1. Client side integration\n\n\n3.2. Server side integration\n\n\n\n\n\n\n4. Deploy integration\n\n\n\n\n1. Signup as merchant\n\n\nFirst of all you will need a merchant and a consumer accounts.\n\nMerchant\n is an online business service like e-commerce websites, ISP online payment, Movie online purchase etc.\n\nConsumer\n is an end user who uses Khalti to purchase products or services from merchants.\n\n\nPlease follow links below to create a merchant and a consumer accounts if you have not already.\n\n\n\n\nCreate a merchant account\n\n\nCreate a consumer account\n\n\n\n\n2. Understand Khalti payment process\n\n\n\n\n3. Test integration\n\n\nNow that you know how Khalti payment works. Its time to integrate it into your system.\nA merchant must complete test integration using test keys. Test keys start with \ntest_\n.\n\n\nIn test mode, transactions are sandboxed, which means fund is not moved from a consumer to the merchant.\nKhalti must to be integrated at client and server. A client initiates and confirms payment while server verifies it.\n\n\n3.1. Client side integration\n\n\nFor now there is only one way to integrate Khalti at client side, through SDKs.\nWe have developed SDKs for every major plaforms and we call it \nCheckout\n.\n\n\nCheckouts provide all the necessary UIs and perform necessary processes to initiate and confirm payment.\n\n\n\n\nWeb\n\n\nAndroid\n\n\niOS\n (Comming soon)\n\n\n\n\n3.2. Server side integration\n\n\nAfter user confirms payment, it has to be verified by Khalti.\n\nFund from user's account is moved to merchant only if verification succeeds.\n\nVerification must be done by the merchant server using a secret key.\n\n\n\n\nVerification api\n\n\nTransaction api\n\n\n\n\n4. Deploy integration\n\n\nAfter successful integration test, the merchant must replace test keys with live ones.\nLive keys start with \nlive_X_X\n. Replace \ntest_public_X\n and \ntest_secret_X\n keys with \nlive_public_X\n and \nlive_secret_X\n keys respectively.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#1-signup-as-merchant", 
            "text": "First of all you will need a merchant and a consumer accounts. Merchant  is an online business service like e-commerce websites, ISP online payment, Movie online purchase etc. Consumer  is an end user who uses Khalti to purchase products or services from merchants.  Please follow links below to create a merchant and a consumer accounts if you have not already.   Create a merchant account  Create a consumer account", 
            "title": "1. Signup as merchant"
        }, 
        {
            "location": "/getting-started/#2-understand-khalti-payment-process", 
            "text": "", 
            "title": "2. Understand Khalti payment process"
        }, 
        {
            "location": "/getting-started/#3-test-integration", 
            "text": "Now that you know how Khalti payment works. Its time to integrate it into your system.\nA merchant must complete test integration using test keys. Test keys start with  test_ .  In test mode, transactions are sandboxed, which means fund is not moved from a consumer to the merchant.\nKhalti must to be integrated at client and server. A client initiates and confirms payment while server verifies it.", 
            "title": "3. Test integration"
        }, 
        {
            "location": "/getting-started/#31-client-side-integration", 
            "text": "For now there is only one way to integrate Khalti at client side, through SDKs.\nWe have developed SDKs for every major plaforms and we call it  Checkout .  Checkouts provide all the necessary UIs and perform necessary processes to initiate and confirm payment.   Web  Android  iOS  (Comming soon)", 
            "title": "3.1. Client side integration"
        }, 
        {
            "location": "/getting-started/#32-server-side-integration", 
            "text": "After user confirms payment, it has to be verified by Khalti. Fund from user's account is moved to merchant only if verification succeeds. \nVerification must be done by the merchant server using a secret key.   Verification api  Transaction api", 
            "title": "3.2. Server side integration"
        }, 
        {
            "location": "/getting-started/#4-deploy-integration", 
            "text": "After successful integration test, the merchant must replace test keys with live ones.\nLive keys start with  live_X_X . Replace  test_public_X  and  test_secret_X  keys with  live_public_X  and  live_secret_X  keys respectively.", 
            "title": "4. Deploy integration"
        }, 
        {
            "location": "/checkout/web/", 
            "text": "Khalti checkout can be integrated with or without build tools like \n\nWebpack\n and \nRollup\n.\n\n\nTo get the feel of how Khalti checkout looks click the button below.\n\n\nPay with Khalti\n\n\nWithout build tools\n\n\nhtml\n\n\nhead\n\n    \nscript src=\nhttps://khalti.com/static/khalti-checkout.js\n/script\n\n\n/head\n\n\nbody\n\n    ...\n    \n!-- Place this where you need payment button --\n\n    \nbutton id=\npayment-button\nPay with Khalti\n/button\n\n    \n!-- Place this where you need payment button --\n\n    \n!-- Paste this code anywhere in you body tag --\n\n    \nscript\n\n        var config = {\n            // replace the publicKey with yours\n            \npublicKey\n: \ntest_public_key_dc74e0fd57cb46cd93832aee0a507256\n,\n            \nproductIdentity\n: \n1234567890\n,\n            \nproductName\n: \nDragon\n,\n            \nproductUrl\n: \nhttp://gameofthrones.wikia.com/wiki/Dragons\n,\n            \neventHandler\n: {\n                onSuccess (payload) {\n                    // hit merchant api for initiating verfication\n                    console.log(payload);\n                },\n                onError (error) {\n                    console.log(error);\n                },\n                onClose () {\n                    console.log('widget is closing');\n                }\n            }\n        };\n\n        var checkout = new KhaltiCheckout(config);\n        var btn = document.getElementById(\npayment-button\n);\n        btn.onclick = function () {\n            checkout.show({amount: 1000});\n        }\n    \n/script\n\n    \n!-- Paste this code anywhere in you body tag --\n\n    ...\n\n/body\n\n\n/html\n\n\n\n\n\nClick here\n for details on config parameters.\n\n\nWith build tools\n\n\nKhalti checkout can be bundled with build tools like Webpack, Rollup, etc.\n\n\n1. Install \nkhalti-web\n\n\nUsing yarn\n\n\nyarn add khalti-web\n\n\nUsing npm\n\n\nnpm install khalti-web --save\n\n\n2. Import and use it in your desired component\n\n\nimport KhaltiCheckout from \nkhalti-web\n;\n\nlet config = {\n    // replace this key with yours\n    \npublicKey\n: \ntest_public_key_dc74e0fd57cb46cd93832aee0a507256\n,\n    \nproductIdentity\n: \n1234567890\n,\n    \nproductName\n: \nDrogon\n,\n    \nproductUrl\n: \nhttp://gameofthrones.com/buy/Dragons\n,\n    \neventHandler\n: {\n        onSuccess (payload) {\n            // hit merchant api for initiating verfication\n            console.log(payload);\n        },\n        // onError handler is optional\n        onError (error) {\n            // handle errors\n            console.log(error);\n        },\n        onClose () {\n            console.log('widget is closing');\n        }\n    }\n};\n\nlet checkout = new KhaltiCheckout(config);\nlet btn = document.getElementById(\npayment-button\n);\nbtn.onclick = function () {\n    checkout.show({amount: 1000});\n}\n\n\n\n\nAPI\n\n\n\n\n\n\nKhaltiCheckout(configuration?)\n\n\n\n\nInstantiate \nKhaltiCheckout\n class and pass a \nconfiguration\n.\n\n\n\n\n\n\n\n\nshow(configuration?)\n\n\n\n\nDisplays the Khalti checkout widget.\n\n\n\n\n\n\n\n\nhide()\n\n\n\n\nHide the widget.\n\n\n\n\n\n\n\n\nConfiguration\n\n\nConfiguration is a Javascript object with following attributes.\n\n\n\n\n\n\npublicKey\n: Test or live public key which identifies the merchant.\n\n\n\n\n\n\namount\n: Amount to pay. It must be in paisa.\n\n\n\n\n\n\nproductIdentity\n: Unique product identifier at merchant.\n\n\n\n\n\n\nproductName\n: Name of product\n\n\n\n\n\n\nproductUrl(optional)\n: Url of the product.\n\n\n\n\n\n\neventHandler\n: It is an object with three methods:\n\n\n\n\n\n\n\n\n1) \nonSuccess\n\n    This method is called once a transaction is confirmed by a user.\n    The success response is in the following format:\n\n\n\n\n{\n    \"amount\": 1000,\n    \"mobile\": \"98XXXXX969\",\n    \"product_identity\": \"1234567890\",\n    \"product_name\": \"Dragon\",\n    \"product_url\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n    \"token\": \"QUao9cqFzxPgvWJNi9aKac\"\n}\n\n\n\nIt receives transaction \ntoken\n and \namount\n among other payloads.\nOne should implement this method to initiate payment verification \nat merchant which in turn will make verification request at Khalti.\nFor documentation on verification follow this \nlink\n.\n\n\n\n\n2) \nonError (optional)\n\n    This method is optional. If implemented, it will receive errors that occured during payment initiation and confirmation. Example error format for \nInvalid Transaction PIN or Confirmation Code\n:\n\n\n\n\n{\n  \"action\": \"WALLET_PAYMENT_CONFIRM\",\n  \"message\": undefined,\n  \"payload\": {\n    \"detail\": \"Confirmation code or transaction pin does not match.\"\n  },\n  \"status_code\": 400\n}\n\n\n\n\n\n3) \nonClose (optional)\n\n        This method is also optional. If implemented, this method is called when \nclose icon(X)\n of the widget is called.\n\n\n\n\nAdditionally\n Configuration also accepts attribute starting with \nmerchant_\n that can be used to pass additional (meta) data. \n\n\n\n\n\n\nmerchant_name\n: This is merchant name\n\n\n\n\n\n\nmerchant_extra\n: This is extra data\n\n\n\n\n\n\nThe additional data starting with \nmerchant_\n is returned in success response payload.\n\n\nCheck out the source for \nKhalti checkout on Github\n.\n\n\n\n\n\n\n        var config = {\n            // replace the publicKey with yours\n            \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\",\n            \"productIdentity\": \"1234567890\",\n            \"productName\": \"Dragon\",\n            \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n            \"eventHandler\": {\n                onSuccess (payload) {\n                    // hit merchant api for initiating verfication\n                    console.log(payload);\n                },\n                onError (error) {\n                    console.log(error);\n                },\n                onClose () {\n                    console.log('widget is closing');\n                }\n            }\n        };\n\n        var checkout = new KhaltiCheckout(config);\n        var btn = document.getElementById(\"payment-button\");\n        btn.onclick = function () {\n            checkout.show({amount: 1000});\n        }", 
            "title": "Web"
        }, 
        {
            "location": "/checkout/web/#without-build-tools", 
            "text": "html  head \n     script src= https://khalti.com/static/khalti-checkout.js /script  /head  body \n    ...\n     !-- Place this where you need payment button -- \n     button id= payment-button Pay with Khalti /button \n     !-- Place this where you need payment button -- \n     !-- Paste this code anywhere in you body tag -- \n     script \n        var config = {\n            // replace the publicKey with yours\n             publicKey :  test_public_key_dc74e0fd57cb46cd93832aee0a507256 ,\n             productIdentity :  1234567890 ,\n             productName :  Dragon ,\n             productUrl :  http://gameofthrones.wikia.com/wiki/Dragons ,\n             eventHandler : {\n                onSuccess (payload) {\n                    // hit merchant api for initiating verfication\n                    console.log(payload);\n                },\n                onError (error) {\n                    console.log(error);\n                },\n                onClose () {\n                    console.log('widget is closing');\n                }\n            }\n        };\n\n        var checkout = new KhaltiCheckout(config);\n        var btn = document.getElementById( payment-button );\n        btn.onclick = function () {\n            checkout.show({amount: 1000});\n        }\n     /script \n     !-- Paste this code anywhere in you body tag -- \n    ... /body  /html   Click here  for details on config parameters.", 
            "title": "Without build tools"
        }, 
        {
            "location": "/checkout/web/#with-build-tools", 
            "text": "Khalti checkout can be bundled with build tools like Webpack, Rollup, etc.", 
            "title": "With build tools"
        }, 
        {
            "location": "/checkout/web/#1-install-khalti-web", 
            "text": "", 
            "title": "1. Install khalti-web"
        }, 
        {
            "location": "/checkout/web/#using-yarn", 
            "text": "yarn add khalti-web", 
            "title": "Using yarn"
        }, 
        {
            "location": "/checkout/web/#using-npm", 
            "text": "npm install khalti-web --save", 
            "title": "Using npm"
        }, 
        {
            "location": "/checkout/web/#2-import-and-use-it-in-your-desired-component", 
            "text": "import KhaltiCheckout from  khalti-web ;\n\nlet config = {\n    // replace this key with yours\n     publicKey :  test_public_key_dc74e0fd57cb46cd93832aee0a507256 ,\n     productIdentity :  1234567890 ,\n     productName :  Drogon ,\n     productUrl :  http://gameofthrones.com/buy/Dragons ,\n     eventHandler : {\n        onSuccess (payload) {\n            // hit merchant api for initiating verfication\n            console.log(payload);\n        },\n        // onError handler is optional\n        onError (error) {\n            // handle errors\n            console.log(error);\n        },\n        onClose () {\n            console.log('widget is closing');\n        }\n    }\n};\n\nlet checkout = new KhaltiCheckout(config);\nlet btn = document.getElementById( payment-button );\nbtn.onclick = function () {\n    checkout.show({amount: 1000});\n}", 
            "title": "2. Import and use it in your desired component"
        }, 
        {
            "location": "/checkout/web/#api", 
            "text": "KhaltiCheckout(configuration?)   Instantiate  KhaltiCheckout  class and pass a  configuration .     show(configuration?)   Displays the Khalti checkout widget.     hide()   Hide the widget.", 
            "title": "API"
        }, 
        {
            "location": "/checkout/web/#configuration", 
            "text": "Configuration is a Javascript object with following attributes.    publicKey : Test or live public key which identifies the merchant.    amount : Amount to pay. It must be in paisa.    productIdentity : Unique product identifier at merchant.    productName : Name of product    productUrl(optional) : Url of the product.    eventHandler : It is an object with three methods:     1)  onSuccess \n    This method is called once a transaction is confirmed by a user.\n    The success response is in the following format:   {\n    \"amount\": 1000,\n    \"mobile\": \"98XXXXX969\",\n    \"product_identity\": \"1234567890\",\n    \"product_name\": \"Dragon\",\n    \"product_url\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n    \"token\": \"QUao9cqFzxPgvWJNi9aKac\"\n}  It receives transaction  token  and  amount  among other payloads.\nOne should implement this method to initiate payment verification \nat merchant which in turn will make verification request at Khalti.\nFor documentation on verification follow this  link .   2)  onError (optional) \n    This method is optional. If implemented, it will receive errors that occured during payment initiation and confirmation. Example error format for  Invalid Transaction PIN or Confirmation Code :   {\n  \"action\": \"WALLET_PAYMENT_CONFIRM\",\n  \"message\": undefined,\n  \"payload\": {\n    \"detail\": \"Confirmation code or transaction pin does not match.\"\n  },\n  \"status_code\": 400\n}   3)  onClose (optional) \n        This method is also optional. If implemented, this method is called when  close icon(X)  of the widget is called.   Additionally  Configuration also accepts attribute starting with  merchant_  that can be used to pass additional (meta) data.     merchant_name : This is merchant name    merchant_extra : This is extra data    The additional data starting with  merchant_  is returned in success response payload.  Check out the source for  Khalti checkout on Github .   \n        var config = {\n            // replace the publicKey with yours\n            \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\",\n            \"productIdentity\": \"1234567890\",\n            \"productName\": \"Dragon\",\n            \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n            \"eventHandler\": {\n                onSuccess (payload) {\n                    // hit merchant api for initiating verfication\n                    console.log(payload);\n                },\n                onError (error) {\n                    console.log(error);\n                },\n                onClose () {\n                    console.log('widget is closing');\n                }\n            }\n        };\n\n        var checkout = new KhaltiCheckout(config);\n        var btn = document.getElementById(\"payment-button\");\n        btn.onclick = function () {\n            checkout.show({amount: 1000});\n        }", 
            "title": "Configuration"
        }, 
        {
            "location": "/checkout/android/", 
            "text": "Documentation of Khalti checkout for android\n\n\nInstallation\n\n\nAdd the following line to \ndependency\n section in \nbuild.gradle\n file\n\n\ncompile 'com.khalti:khalti-android:1.2.1'\n\n\n\n\nIt is recommended that you update your support libraries to the latest version. However, if you're unable to update the libraries add the following line instead.\n\n\ncompile ('com.khalti:khalti-android:1.2.1') {\n        transitive = true\n    }\n\n\n\n\nNote : We recommend you to use the latest version of \nBuild tools\n and \nSupport libraries\n for maximum compatibility. \n\n\nIn order to build and run this project, please use \nAndroid Studio 3\n and please note that the minimum \nBuild tools\n and \nSupport libraries\n version should be \n27\n.\n\n\ncompileSdkVersion 27\nbuildToolsVersion '27.0.3'\n\ncompile 'com.android.support:appcompat-v7:27.0.2'\n\n\n\n\nIn order to add support library 27, add the Google's maven url in \nbuild.gradle\n\n\nrepositories {\n        jcenter()\n        mavenCentral()\n        maven { url \nhttps://maven.google.com\n }\n    }\n\n\n\n\nImportant\n Add the lines below in android default config of 'build.gradle'\n\n\nrenderscriptTargetApi 20\nrenderscriptSupportModeEnabled true\n\n\n\n\nUsage\n\n\nLayout\n\n\nYou can add KhaltiButton to your xml layout\n\n\nkhalti.widget.KhaltiButton\n            android:id=\n@+id/khalti_button\n\n            android:layout_width=\nwrap_content\n\n            android:layout_height=\nwrap_content\n/\n\n\n\n\n\n\nAnd, Locate your xml Khalti Button in your Java\n\n\nKhaltiButton khaltiButton = (KhaltiButton) findViewById(R.id.khalti_button);\n\n\n\n\nOr, use it in Java\n\n\nKhaltiButton khaltiButton = new KhaltiButton();\n\n\n\n\nAnd, add this java KhaltiButton into your layout container.\n\n\nConfigure\n\n\nConfigure Khalti Checkout by passing an instance of Config class\n\n\nWhen instantiating Config class pass public key, product id, product name, product web url, amount (in paisa) and a new instance of OnCheckOutListener.\n\n\nConfig config = new Config(\nPublic Key\n, \nProduct ID\n, \nProduct Name\n, \nProduct Url\n, amount, new OnCheckOutListener() {\n\n            @Override\n            public void onSuccess(HashMap\nString, Object\n data) {\n                Log.i(\nPayment confirmed\n, data+\n);\n            }\n\n            @Override\n            public void onError(String action, String message) {\n                Log.i(action, message);\n            }\n        });\n\n\n\n\nAdditionally, Config class also accepts a HashMap parameter which you can use to pass any additional data. Make sure you add a \nmerchant_\n prefix in your map key.\n\n\nHashMap\nString, String\n map = new HashMap\n();\n        map.put(\nmerchant_extra\n, \nThis is extra data\n);\n\n        Config config = new Config(\nPublic Key\n, \nProduct ID\n, \nProduct Name\n, \nProduct Url\n, amount, map, new OnCheckOutListener() {\n\n            @Override\n            public void onSuccess(HashMap\nString, Object\n data) {\n                Log.i(\nPayment confirmed\n, data);\n            }\n\n            @Override\n            public void onError(String action, String message) {\n                Log.i(action, message);\n            }\n        });\n\n\n\n\n\nSet Config\n\n\nFinally set your config in your KhaltiButton.\n\n\nkhaltiButton.setCheckOutConfig(config);\n\n\n\n\nSummary\n\n\nXML Attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkhalti:text\n\n\nText to display\n\n\n\n\n\n\nkhalti:button_style\n\n\nSet the style of KhaltiButton from 2 options\n\n\n\n\n\n\n\n\nPublic Methods\n\n\n\n\n\n\n\n\nConstraint\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRequired\n\n\nsetCheckOutConfig(Config config)\n\n\nSet configuration required by Khalti checkout\n\n\n\n\n\n\nOptional\n\n\nsetText(String text)\n\n\nSet text to display in KhaltiButton\n\n\n\n\n\n\nOptional\n\n\nsetCustomView(View view)\n\n\nReplace KhaltiButton's default view with your custom view\n\n\n\n\n\n\nOptional\n\n\nsetButtonStyle(ButtonStyle buttonStyle)\n\n\nSelect between 2 options to set KhaltiButton's style\n\n\n\n\n\n\nOptional\n\n\nshowCheckOut()\n\n\nUse this method to show Khalti checkout UI\n\n\n\n\n\n\nOptional\n\n\ndestroyCheckOut()\n\n\nUse this method to close Khalti checkout UI\n\n\n\n\n\n\n\n\nCallback Methods\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonSuccess(HashMap data)\n\n\nThis method is called when a transaction has been completed and confirmed by the user. A map containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the \nverification\n process for further instructions.\n\n\n\n\n\n\nonError(String action, String message)\n\n\nThis method is called when an error occurs during payment initiation and confirmation. Action and message value is passed where action defines, the current action being performed and message defines the error.\n\n\n\n\n\n\n\n\nResponse Sample\n\n\nSuccess Messsage\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmobile\n\n\n98XXXXXXXX\n\n\nString\n\n\n\n\n\n\nproduct_name\n\n\nProduct Name\n\n\nString\n\n\n\n\n\n\nproduct_identity\n\n\nProduct Id\n\n\nString\n\n\n\n\n\n\nproduct_url\n\n\nProduct Url\n\n\nString\n\n\n\n\n\n\namount\n\n\n100\n\n\nLong\n\n\n\n\n\n\ntoken\n\n\ntoken\n\n\nString\n\n\n\n\n\n\n\n\nThe success message also contains all the \nkey\n and \nvalue\n provide as extra data while initiating \nConfig\n \n\n\nError Messsage\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naction\n\n\nAction performed - initiate, confirm\n\n\nString\n\n\n\n\n\n\nmessage\n\n\nDetail Error Message\n\n\nString\n\n\n\n\n\n\n\n\nMore Implementations\n\n\nMethod 1: With Custom Click Listener\n\n\nInitialize the KhaltiCheckout Object\n\n\nKhaltiCheckOut khaltiCheckOut = new KhaltiCheckOut(this, config);\n\n\n\n\nUse \nkhaltiCheckout.show()\n to display khalti widget\n\n\nkhaltiButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                khaltiCheckOut.show();\n            }\n        });\n\n\n\n\nMethod 2: With Custom View\n\n\nGet your custom view\n\n\nView view = LayoutInflater.from(this).inflate(R.layout.custom_khalti_button, container, false);\n\n\n\n\nSet custom view to your khalti button\n\n\nkhaltiButton.setCustomView(view);\nkhaltiButton.setCheckOutConfig(config);\n\n\n\n\nCheck out the source for \nKhalti checkout on Github\n.\n\n\nCheck out the \nVerification\n process.", 
            "title": "Android"
        }, 
        {
            "location": "/checkout/android/#installation", 
            "text": "Add the following line to  dependency  section in  build.gradle  file  compile 'com.khalti:khalti-android:1.2.1'  It is recommended that you update your support libraries to the latest version. However, if you're unable to update the libraries add the following line instead.  compile ('com.khalti:khalti-android:1.2.1') {\n        transitive = true\n    }  Note : We recommend you to use the latest version of  Build tools  and  Support libraries  for maximum compatibility.   In order to build and run this project, please use  Android Studio 3  and please note that the minimum  Build tools  and  Support libraries  version should be  27 .  compileSdkVersion 27\nbuildToolsVersion '27.0.3'\n\ncompile 'com.android.support:appcompat-v7:27.0.2'  In order to add support library 27, add the Google's maven url in  build.gradle  repositories {\n        jcenter()\n        mavenCentral()\n        maven { url  https://maven.google.com  }\n    }  Important  Add the lines below in android default config of 'build.gradle'  renderscriptTargetApi 20\nrenderscriptSupportModeEnabled true", 
            "title": "Installation"
        }, 
        {
            "location": "/checkout/android/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/checkout/android/#layout", 
            "text": "You can add KhaltiButton to your xml layout  khalti.widget.KhaltiButton\n            android:id= @+id/khalti_button \n            android:layout_width= wrap_content \n            android:layout_height= wrap_content /   And, Locate your xml Khalti Button in your Java  KhaltiButton khaltiButton = (KhaltiButton) findViewById(R.id.khalti_button);  Or, use it in Java  KhaltiButton khaltiButton = new KhaltiButton();  And, add this java KhaltiButton into your layout container.", 
            "title": "Layout"
        }, 
        {
            "location": "/checkout/android/#configure", 
            "text": "Configure Khalti Checkout by passing an instance of Config class  When instantiating Config class pass public key, product id, product name, product web url, amount (in paisa) and a new instance of OnCheckOutListener.  Config config = new Config( Public Key ,  Product ID ,  Product Name ,  Product Url , amount, new OnCheckOutListener() {\n\n            @Override\n            public void onSuccess(HashMap String, Object  data) {\n                Log.i( Payment confirmed , data+ );\n            }\n\n            @Override\n            public void onError(String action, String message) {\n                Log.i(action, message);\n            }\n        });  Additionally, Config class also accepts a HashMap parameter which you can use to pass any additional data. Make sure you add a  merchant_  prefix in your map key.  HashMap String, String  map = new HashMap ();\n        map.put( merchant_extra ,  This is extra data );\n\n        Config config = new Config( Public Key ,  Product ID ,  Product Name ,  Product Url , amount, map, new OnCheckOutListener() {\n\n            @Override\n            public void onSuccess(HashMap String, Object  data) {\n                Log.i( Payment confirmed , data);\n            }\n\n            @Override\n            public void onError(String action, String message) {\n                Log.i(action, message);\n            }\n        });", 
            "title": "Configure"
        }, 
        {
            "location": "/checkout/android/#set-config", 
            "text": "Finally set your config in your KhaltiButton.  khaltiButton.setCheckOutConfig(config);", 
            "title": "Set Config"
        }, 
        {
            "location": "/checkout/android/#summary", 
            "text": "", 
            "title": "Summary"
        }, 
        {
            "location": "/checkout/android/#xml-attribute", 
            "text": "Attribute  Description      khalti:text  Text to display    khalti:button_style  Set the style of KhaltiButton from 2 options", 
            "title": "XML Attribute"
        }, 
        {
            "location": "/checkout/android/#public-methods", 
            "text": "Constraint  Method  Description      Required  setCheckOutConfig(Config config)  Set configuration required by Khalti checkout    Optional  setText(String text)  Set text to display in KhaltiButton    Optional  setCustomView(View view)  Replace KhaltiButton's default view with your custom view    Optional  setButtonStyle(ButtonStyle buttonStyle)  Select between 2 options to set KhaltiButton's style    Optional  showCheckOut()  Use this method to show Khalti checkout UI    Optional  destroyCheckOut()  Use this method to close Khalti checkout UI", 
            "title": "Public Methods"
        }, 
        {
            "location": "/checkout/android/#callback-methods", 
            "text": "Method  Description      onSuccess(HashMap data)  This method is called when a transaction has been completed and confirmed by the user. A map containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the  verification  process for further instructions.    onError(String action, String message)  This method is called when an error occurs during payment initiation and confirmation. Action and message value is passed where action defines, the current action being performed and message defines the error.", 
            "title": "Callback Methods"
        }, 
        {
            "location": "/checkout/android/#response-sample", 
            "text": "", 
            "title": "Response Sample"
        }, 
        {
            "location": "/checkout/android/#success-messsage", 
            "text": "Key  Value  Type      mobile  98XXXXXXXX  String    product_name  Product Name  String    product_identity  Product Id  String    product_url  Product Url  String    amount  100  Long    token  token  String     The success message also contains all the  key  and  value  provide as extra data while initiating  Config", 
            "title": "Success Messsage"
        }, 
        {
            "location": "/checkout/android/#error-messsage", 
            "text": "Variable  Description  Type      action  Action performed - initiate, confirm  String    message  Detail Error Message  String", 
            "title": "Error Messsage"
        }, 
        {
            "location": "/checkout/android/#more-implementations", 
            "text": "", 
            "title": "More Implementations"
        }, 
        {
            "location": "/checkout/android/#method-1-with-custom-click-listener", 
            "text": "Initialize the KhaltiCheckout Object  KhaltiCheckOut khaltiCheckOut = new KhaltiCheckOut(this, config);  Use  khaltiCheckout.show()  to display khalti widget  khaltiButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                khaltiCheckOut.show();\n            }\n        });", 
            "title": "Method 1: With Custom Click Listener"
        }, 
        {
            "location": "/checkout/android/#method-2-with-custom-view", 
            "text": "Get your custom view  View view = LayoutInflater.from(this).inflate(R.layout.custom_khalti_button, container, false);  Set custom view to your khalti button  khaltiButton.setCustomView(view);\nkhaltiButton.setCheckOutConfig(config);  Check out the source for  Khalti checkout on Github .  Check out the  Verification  process.", 
            "title": "Method 2: With Custom View"
        }, 
        {
            "location": "/checkout/ios/", 
            "text": "Khalti\n\n\n\n\n\n\n\n\nRelase 0.1.2\n\n\nPod has already been released but updates are under process.\n\n\nPod Depedency\n\n\nKhalti has currenlty depenceny on  \nAlamofire\n.\nThis dependency will be soon be removed.\n\n\nFor best working with UI incorporated in this library \nIQKeyboardManager\n is used. Suggest using \n\n\npod 'IQKeyboarManager'\n\n\n\n\nSo installation of \nKhalti\n provides automatically dependency pod \nAlamofire\n but use of \nIQKeyboardManager\n is up to you.\n\n\nExample\n\n\nTo run the example project, clone the repo, and run \npod install\n from the Example directory first.\n\n\nInstallation guide\n\n\nKhalti is available through \nCocoaPods\n. To install\nit, simply add the following line to your Podfile:\n\n\npod 'Khalti'\n\n\n\n\nUsage\n\n\nAdding CustomSchme\n\n\nKhalti uses custom Scheme: So merhant should setup \nURLScheme\n unique for their app. We have made usability as of user case.\n\n\n\n\nAfter adding Url Scheme create global constant for same customUrlScheme as below \n\n\nlet khaltiUrlScheme:String = \nKhaltiPayExampleScheme\n\n\n\n\n\nRequirements\n\n\nTo work around with this redirection you have to implement some openUrl in \nAppdelegate.swift\n. \n\n\nKhalti.shared.defaultAction()\n returns \ntrue\n if you initiate payment through Khalti.\n\nKhalti.shared.action(with: url)\n is needed for complete action after ebanking and card payment. \n\n\nNote:\n Using \nKhalti.shared.action(with: url)\n  is mandatory.\n\n\nAdd following code to \nAppdelegate.swift\n\n\n func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -\n Bool {\n    Khalti.shared.action(with: url)\n    return Khalti.shared.defaultAction() // Or true \n}\n\n\n\n\nUsing at particular ViewController\n\n\nAt your viewController during action of pay add initiate config file\n\n\nWhen instantiating \nConfig\n  pass public key, product id, product name, amount (in paisa).\nProduct web url and additional data are optional.\n\n\nlet TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \n1234567890\n, productName: \nDragon_boss\n, productUrl: \nhttp://gameofthrones.wikia.com/wiki/Dragons\n,additionalData: additionalData)\n// Data passed here are based on Example project\n\n\n\n\nNote:\n  Public is provided to every merchant of khalti. Intially test is available to every merchant and live key is provided after MoU signup with Khalti.\n\n\nAt this stage the scheme named you declared earlier is passed to \nKhatli.shared.appUrlScheme\n\n\nKhalti.shared.appUrlScheme = khaltiUrlScheme // see above for file khaltiUrlScheme\n// This can be used at appdelegate during didfinishlaunching. \n// This should be mandatory\n\n\n\n\nFinally present the khaltiPay Viewcontroller by calling public funcation \n\n\nKhalti.present(caller: self, with: TEST_CONFIG, delegate: self)\n\n\n\n\nParams of present function of Khalti\n\n\n\n\n\n\n\n\nparam\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ncaller\n\n\nviewController  from where you initate payment.\n\n\n\n\n\n\nwith\n\n\nConfig object\n\n\n\n\n\n\ndelegate\n\n\nself\n\n\n\n\n\n\n\n\nDelegate must be assigned to same Viewcontroller to get callback action from KhaltiPayDelegate.\n\n\nExample as used in Example Project\n\n\nlet extra:[String : Any] =  [\nno\n:false,\nyes\n:true,\nint\n : 0, \nfloat\n:12.23]\n\nlet jsonData = try? JSONSerialization.data(withJSONObject: extra, options: JSONSerialization.WritingOptions())\nlet jsonString = String(data: jsonData!, encoding: .utf8)!\n\nlet additionalData:Dictionary\nString,String\n = [\n    \nmerchant_name\n : \nHelloPaaaaisaPVTLtd.\n,\n    \nmerchant_extra\n : jsonString\n]\n\nKhalti.shared.appUrlScheme = khaltiUrlScheme\nlet khaltiMerchantKey = \ntest_public_key_dc74e0fd57cb46cd93832aee0a507256\n // This key is from local server so it won't work if you use the example as is it. Use your own public test key\n\nlet TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \n1234567890\n, productName: \nDragon_boss\n, productUrl: \nhttp://gameofthrones.wikia.com/wiki/Dragons\n,additionalData: additionalData)\nKhalti.present(caller: self, with: TEST_CONFIG, delegate: self)\n\n\n\n\nAdditionally, Config class also accepts a Dictionary\n which you can use to pass any additional data. Make sure you add a \nmerchant_\n prefix in your map key.\n\n\nUsing delegates\n\n\nThe viewController you implement pay action should contain KhaltiPayDelegate implementing\n \nonCheckOutSuccess(data: Dictionary\nString, Any\n)\n\n \nonCheckOutError(action: String, message: String)\n\n\nextension YourViewController: KhaltiPayDelegate {\n    func onCheckOutSuccess(data: Dictionary\nString, Any\n) {\n        print(data)\n        print(\nOh there is success message received\n)\n    }\n\n    func onCheckOutError(action: String, message: String) {\n        print(action)\n        print(message)\n        print(\nOh there occure error in payment\n)\n    }\n}\n\n\n\n\nSummary\n\n\nCallback Methods\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonCheckOutSuccess(data: Dictionary\nString, Any\n)\n\n\nThis method is called when a transaction has been completed and confirmed by the user. A dictionary containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the \nverification\n process for further instructions.\n\n\n\n\n\n\nonCheckOutError(action: String, message: String)\n\n\nThis method is called when an error occurs during payment initiation and confirmation. Action and message value is passed where action defines, the current action being performed and message defines the error.\n\n\n\n\n\n\n\n\nResponse Sample\n\n\nSuccess Messsage\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmobile\n\n\n98XXXXXXXX\n\n\nString\n\n\n\n\n\n\nproduct_name\n\n\nProduct Name\n\n\nString\n\n\n\n\n\n\nproduct_identity\n\n\nProduct Id\n\n\nString\n\n\n\n\n\n\nproduct_url\n\n\nProduct Url\n\n\nString\n\n\n\n\n\n\namount\n\n\n100\n\n\nInt\n\n\n\n\n\n\ntoken\n\n\ntoken\n\n\nString\n\n\n\n\n\n\n\n\nThe success message also contains all the \nkey\n and \nvalue\n provide as extra data while initiating \nConfig\n \n\n\nError Messsage\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naction\n\n\nAction performed - initiate, confirm\n\n\nString\n\n\n\n\n\n\nmessage\n\n\nDetail Error Message\n\n\nString\n\n\n\n\n\n\n\n\nAuthor\n\n\nKhalti\n\n\nLicense\n\n\nKhalti is available under the MIT license. See the LICENSE file for more info.\n\n\nCheck out the source for \nKhalti checkout on Github\n.", 
            "title": "iOS"
        }, 
        {
            "location": "/checkout/ios/#khalti", 
            "text": "", 
            "title": "Khalti"
        }, 
        {
            "location": "/checkout/ios/#relase-012", 
            "text": "Pod has already been released but updates are under process.", 
            "title": "Relase 0.1.2"
        }, 
        {
            "location": "/checkout/ios/#pod-depedency", 
            "text": "Khalti has currenlty depenceny on   Alamofire .\nThis dependency will be soon be removed.  For best working with UI incorporated in this library  IQKeyboardManager  is used. Suggest using   pod 'IQKeyboarManager'  So installation of  Khalti  provides automatically dependency pod  Alamofire  but use of  IQKeyboardManager  is up to you.", 
            "title": "Pod Depedency"
        }, 
        {
            "location": "/checkout/ios/#example", 
            "text": "To run the example project, clone the repo, and run  pod install  from the Example directory first.", 
            "title": "Example"
        }, 
        {
            "location": "/checkout/ios/#installation-guide", 
            "text": "Khalti is available through  CocoaPods . To install\nit, simply add the following line to your Podfile:  pod 'Khalti'", 
            "title": "Installation guide"
        }, 
        {
            "location": "/checkout/ios/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/checkout/ios/#adding-customschme", 
            "text": "Khalti uses custom Scheme: So merhant should setup  URLScheme  unique for their app. We have made usability as of user case.   After adding Url Scheme create global constant for same customUrlScheme as below   let khaltiUrlScheme:String =  KhaltiPayExampleScheme", 
            "title": "Adding CustomSchme"
        }, 
        {
            "location": "/checkout/ios/#requirements", 
            "text": "To work around with this redirection you have to implement some openUrl in  Appdelegate.swift .   Khalti.shared.defaultAction()  returns  true  if you initiate payment through Khalti. Khalti.shared.action(with: url)  is needed for complete action after ebanking and card payment.   Note:  Using  Khalti.shared.action(with: url)   is mandatory.  Add following code to  Appdelegate.swift   func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -  Bool {\n    Khalti.shared.action(with: url)\n    return Khalti.shared.defaultAction() // Or true \n}", 
            "title": "Requirements"
        }, 
        {
            "location": "/checkout/ios/#using-at-particular-viewcontroller", 
            "text": "At your viewController during action of pay add initiate config file  When instantiating  Config   pass public key, product id, product name, amount (in paisa).\nProduct web url and additional data are optional.  let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId:  1234567890 , productName:  Dragon_boss , productUrl:  http://gameofthrones.wikia.com/wiki/Dragons ,additionalData: additionalData)\n// Data passed here are based on Example project  Note:   Public is provided to every merchant of khalti. Intially test is available to every merchant and live key is provided after MoU signup with Khalti.  At this stage the scheme named you declared earlier is passed to  Khatli.shared.appUrlScheme  Khalti.shared.appUrlScheme = khaltiUrlScheme // see above for file khaltiUrlScheme\n// This can be used at appdelegate during didfinishlaunching. \n// This should be mandatory  Finally present the khaltiPay Viewcontroller by calling public funcation   Khalti.present(caller: self, with: TEST_CONFIG, delegate: self)  Params of present function of Khalti     param  Value      caller  viewController  from where you initate payment.    with  Config object    delegate  self     Delegate must be assigned to same Viewcontroller to get callback action from KhaltiPayDelegate.", 
            "title": "Using at particular ViewController"
        }, 
        {
            "location": "/checkout/ios/#example-as-used-in-example-project", 
            "text": "let extra:[String : Any] =  [ no :false, yes :true, int  : 0,  float :12.23]\n\nlet jsonData = try? JSONSerialization.data(withJSONObject: extra, options: JSONSerialization.WritingOptions())\nlet jsonString = String(data: jsonData!, encoding: .utf8)!\n\nlet additionalData:Dictionary String,String  = [\n     merchant_name  :  HelloPaaaaisaPVTLtd. ,\n     merchant_extra  : jsonString\n]\n\nKhalti.shared.appUrlScheme = khaltiUrlScheme\nlet khaltiMerchantKey =  test_public_key_dc74e0fd57cb46cd93832aee0a507256  // This key is from local server so it won't work if you use the example as is it. Use your own public test key\n\nlet TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId:  1234567890 , productName:  Dragon_boss , productUrl:  http://gameofthrones.wikia.com/wiki/Dragons ,additionalData: additionalData)\nKhalti.present(caller: self, with: TEST_CONFIG, delegate: self)  Additionally, Config class also accepts a Dictionary  which you can use to pass any additional data. Make sure you add a  merchant_  prefix in your map key.", 
            "title": "Example as used in Example Project"
        }, 
        {
            "location": "/checkout/ios/#using-delegates", 
            "text": "The viewController you implement pay action should contain KhaltiPayDelegate implementing\n  onCheckOutSuccess(data: Dictionary String, Any ) \n  onCheckOutError(action: String, message: String)  extension YourViewController: KhaltiPayDelegate {\n    func onCheckOutSuccess(data: Dictionary String, Any ) {\n        print(data)\n        print( Oh there is success message received )\n    }\n\n    func onCheckOutError(action: String, message: String) {\n        print(action)\n        print(message)\n        print( Oh there occure error in payment )\n    }\n}", 
            "title": "Using delegates"
        }, 
        {
            "location": "/checkout/ios/#summary", 
            "text": "", 
            "title": "Summary"
        }, 
        {
            "location": "/checkout/ios/#callback-methods", 
            "text": "Method  Description      onCheckOutSuccess(data: Dictionary String, Any )  This method is called when a transaction has been completed and confirmed by the user. A dictionary containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the  verification  process for further instructions.    onCheckOutError(action: String, message: String)  This method is called when an error occurs during payment initiation and confirmation. Action and message value is passed where action defines, the current action being performed and message defines the error.", 
            "title": "Callback Methods"
        }, 
        {
            "location": "/checkout/ios/#response-sample", 
            "text": "", 
            "title": "Response Sample"
        }, 
        {
            "location": "/checkout/ios/#success-messsage", 
            "text": "Key  Value  Type      mobile  98XXXXXXXX  String    product_name  Product Name  String    product_identity  Product Id  String    product_url  Product Url  String    amount  100  Int    token  token  String     The success message also contains all the  key  and  value  provide as extra data while initiating  Config", 
            "title": "Success Messsage"
        }, 
        {
            "location": "/checkout/ios/#error-messsage", 
            "text": "Variable  Description  Type      action  Action performed - initiate, confirm  String    message  Detail Error Message  String", 
            "title": "Error Messsage"
        }, 
        {
            "location": "/checkout/ios/#author", 
            "text": "Khalti", 
            "title": "Author"
        }, 
        {
            "location": "/checkout/ios/#license", 
            "text": "Khalti is available under the MIT license. See the LICENSE file for more info.  Check out the source for  Khalti checkout on Github .", 
            "title": "License"
        }, 
        {
            "location": "/api/verification/", 
            "text": "Verification\n\n\nAfter user confirms payment, it is verified server to server.\nA verification request must have following signature.\n\n\n\n\nurl\n: \"https://khalti.com/api/payment/verify/\"\n\n\nmethod\n: \"POST\"\n\n\nheaders\n:\n\n\nAuthorization\n: test or live secret key in the form \nKey \nsecret key\n\n\n\n\n\n\npayload\n:\n\n\ntoken\n: Token given my Khalti after payment confirmation.\n\n\namount\n: Amount (in paisa) with which payment was initiated.\n\n\n\n\n\n\n\n\nResponse\n is in the following format:\n\n\nSuccess\n: Success response consists of the idx of transaction created.\n\n\n{'idx': 'ymYXHiG2dYSGk1w7s2SghM'}\n\n\n\n\nError\n: Error response consists of the detail of errors.\n\n\n{'token': ['Invalid token.']}\n\n\n\n\nExamples\n\n\nAssuming the token that we received is \nQUao9cqFzxPgvWJNi9aKac\n.\n\n\nCURL\n\n\ncurl https://khalti.com/api/payment/verify/ \\\n   -H \nAuthorization:Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\n \\\n   -d amount=1000 \\\n   -d token=QUao9cqFzxPgvWJNi9aKac\n\n\n\n\nPHP\n\n\n    $args = http_build_query(array(\n        'token' =\n 'QUao9cqFzxPgvWJNi9aKac',\n        'amount'  =\n 1000\n       );\n\n    $url = \nhttps://khalti.com/api/payment/verify/\n;\n\n    # Make the call using API.\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS,$args);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Response\n    $response = curl_exec($ch);\n    $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n\n\n\n\nPython\n\n\nimport requests\n\nurl = \nhttps://khalti.com/api/payment/verify/\n\npayload = {\n  \ntoken\n: \nQUao9cqFzxPgvWJNi9aKac\n,\n  \namount\n: 1000\n}\nheaders = {\n  \nAuthorization\n: \nKey test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\n\n}\n\nresponse = requests.post(url, payload, headers = headers)", 
            "title": "Verification"
        }, 
        {
            "location": "/api/verification/#verification", 
            "text": "After user confirms payment, it is verified server to server.\nA verification request must have following signature.   url : \"https://khalti.com/api/payment/verify/\"  method : \"POST\"  headers :  Authorization : test or live secret key in the form  Key  secret key    payload :  token : Token given my Khalti after payment confirmation.  amount : Amount (in paisa) with which payment was initiated.     Response  is in the following format:  Success : Success response consists of the idx of transaction created.  {'idx': 'ymYXHiG2dYSGk1w7s2SghM'}  Error : Error response consists of the detail of errors.  {'token': ['Invalid token.']}", 
            "title": "Verification"
        }, 
        {
            "location": "/api/verification/#examples", 
            "text": "Assuming the token that we received is  QUao9cqFzxPgvWJNi9aKac .", 
            "title": "Examples"
        }, 
        {
            "location": "/api/verification/#curl", 
            "text": "curl https://khalti.com/api/payment/verify/ \\\n   -H  Authorization:Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b  \\\n   -d amount=1000 \\\n   -d token=QUao9cqFzxPgvWJNi9aKac", 
            "title": "CURL"
        }, 
        {
            "location": "/api/verification/#php", 
            "text": "$args = http_build_query(array(\n        'token' =  'QUao9cqFzxPgvWJNi9aKac',\n        'amount'  =  1000\n       );\n\n    $url =  https://khalti.com/api/payment/verify/ ;\n\n    # Make the call using API.\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS,$args);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Response\n    $response = curl_exec($ch);\n    $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);", 
            "title": "PHP"
        }, 
        {
            "location": "/api/verification/#python", 
            "text": "import requests\n\nurl =  https://khalti.com/api/payment/verify/ \npayload = {\n   token :  QUao9cqFzxPgvWJNi9aKac ,\n   amount : 1000\n}\nheaders = {\n   Authorization :  Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b \n}\n\nresponse = requests.post(url, payload, headers = headers)", 
            "title": "Python"
        }, 
        {
            "location": "/api/transaction/", 
            "text": "Khalti provides API for retrieving list of payments made to a merchant.\nA merchant should use secret test and live keys for retrieving test and live payments respectively.\n\n\nList of transactions can also be viewed after logging on \nKhalti website\n with merchant account.\n\n\nReplace \nsecret key\n with test or live secret key as per required.\n\n\nResponse\n is paginated and in the following format:\n\n\n{\n  \ntotal_pages\n: 1,\n  \ntotal_records\n: 2,\n  \nnext\n: null,\n  \nprevious\n: null,\n  \nrecord_range\n: [\n    1,\n    2\n  ],\n  \ncurrent_page\n: 1,\n  \nrecords\n: [\n    {\n      \nidx\n: \nvXaHQXJd6Ke79By9dTHsVe\n,\n      \ntype\n: \nWallet payment\n,\n      \nstate\n: \nConfirmed\n,\n      \namount\n: 1000,\n      \nfee_amount\n: 30,\n      \ncreated_on\n: \n2017-11-19T11:17:53.763052+05:45\n,\n      \nsource\n: \n98XXXXX969\n\n    },\n    {\n      \nidx\n: \nymYXHiG2dYSGkxw7s2SghM\n,\n      \ntype\n: \nWallet payment\n,\n      \nstate\n: \nCompleted\n,\n      \namount\n: 1000,\n      \nfee_amount\n: 30,\n      \ncreated_on\n: \n2017-11-19T11:21:39.646256+05:45\n,\n      \nsource\n: \n98XXXXX969\n\n    }\n  ]\n}\n\n\n\n\nList payments\n\n\nCURL\n\n\ncurl https://khalti.com/api/merchant-transaction/ -H \nAuthorization:Key \nsecret key\n\n\n\n\n\nPHP\n\n\n\n    $url = \nhttps://khalti.com/api/merchant-transaction/\n;\n\n    # Make the call using API.\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Response\n    $response = curl_exec($ch);\n    $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n\n\n\n\nPython\n\n\nimport requests\n\nurl = \nhttps://khalti.com/api/merchant-transaction/\n\npayload = {}\nheaders = {\n  \nAuthorization\n: \nKey test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\n\n}\n\nresponse = requests.get(url, payload, headers = headers)\n\n\n\n\nRetrieve a payment\n\n\nCURL\n\n\ncurl https://khalti.com/api/merchant-transaction/\nidx\n/ -H \nAuthorization:Key \nsecret key\n\n\n\n\n\nPHP\n\n\n\n    $url = \nhttps://khalti.com/api/merchant-transaction/\nidx\n/\n;\n\n    # Make the call using API.\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Response\n    $response = curl_exec($ch);\n    $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);\n\n\n\n\n\nPython\n\n\nimport requests\n\nurl = \nhttps://khalti.com/api/merchant-transaction/\nidx\n/\n\nheaders = {\n  \nAuthorization\n: \nKey test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\n\n}\n\nresponse = requests.get(url, headers = headers)", 
            "title": "Transaction"
        }, 
        {
            "location": "/api/transaction/#list-payments", 
            "text": "", 
            "title": "List payments"
        }, 
        {
            "location": "/api/transaction/#curl", 
            "text": "curl https://khalti.com/api/merchant-transaction/ -H  Authorization:Key  secret key", 
            "title": "CURL"
        }, 
        {
            "location": "/api/transaction/#php", 
            "text": "$url =  https://khalti.com/api/merchant-transaction/ ;\n\n    # Make the call using API.\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Response\n    $response = curl_exec($ch);\n    $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);", 
            "title": "PHP"
        }, 
        {
            "location": "/api/transaction/#python", 
            "text": "import requests\n\nurl =  https://khalti.com/api/merchant-transaction/ \npayload = {}\nheaders = {\n   Authorization :  Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b \n}\n\nresponse = requests.get(url, payload, headers = headers)", 
            "title": "Python"
        }, 
        {
            "location": "/api/transaction/#retrieve-a-payment", 
            "text": "", 
            "title": "Retrieve a payment"
        }, 
        {
            "location": "/api/transaction/#curl_1", 
            "text": "curl https://khalti.com/api/merchant-transaction/ idx / -H  Authorization:Key  secret key", 
            "title": "CURL"
        }, 
        {
            "location": "/api/transaction/#php_1", 
            "text": "$url =  https://khalti.com/api/merchant-transaction/ idx / ;\n\n    # Make the call using API.\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    $headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Response\n    $response = curl_exec($ch);\n    $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n    curl_close($ch);", 
            "title": "PHP"
        }, 
        {
            "location": "/api/transaction/#python_1", 
            "text": "import requests\n\nurl =  https://khalti.com/api/merchant-transaction/ idx / \nheaders = {\n   Authorization :  Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b \n}\n\nresponse = requests.get(url, headers = headers)", 
            "title": "Python"
        }
    ]
}