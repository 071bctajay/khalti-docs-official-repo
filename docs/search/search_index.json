{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to Khalti Merchant API documentation.\n\n\nIntroduction\n\n\nKhalti is a new generation payment gateway, digital wallet and API provider system\nfor various online services for Nepal.\nThis is a technical documentation for Khalti merchants' developers. If you are looking\nto add khalti as a payment option in your e-commerce platform, this is the right place to start.\n\n\nWith Khalti SDK, you can accepts payments from:\n\n\n\n\nKhalti User\n\n\nInternet Banking users of our partner banks (your customer does not  need to be a Khalti user)\n\n\n\n\nFeatures\n\n\nBy using Khalti SDK, your customers will have the choice of paying you using Khalti partner banks'\nebanking account along with their Khalti wallet account.\n\n\n\n\nHighly secure and easy to integrate and accept payments.\n\n\nSDKs are available for Web (JavaScript), Android and iOS.\n\n\nYour customers can make wallet payments without leaving your platform.\n\n\nYour customers can make payment using their e-banking accounts in any of our partner banks.\n\n\nYou don't have to bother integrating with individual banks, Khalti will do that for you.\n\n\nKhalti provides a merchant dashboard from where you can view transactions, issue refund,\n  filter and download reports etc.\n\n\nMulti user system\n\n\nRealtime balance\n\n\nWithdraw fund\n\n\n\n\nSupport\n\n\n For Queries, feel free to call us at: \n\n\n\n\n\n\nMobile : 9801165568\n\n\n\n\n\n\nViber/Whatsapp/Skype ID: 9801165568\n\n\n\n\n\n\nEmail: merchant@khalti.com\n\n\n\n\n\n\nGetting Started",
            "title": "Welcome"
        },
        {
            "location": "/#introduction",
            "text": "Khalti is a new generation payment gateway, digital wallet and API provider system\nfor various online services for Nepal.\nThis is a technical documentation for Khalti merchants' developers. If you are looking\nto add khalti as a payment option in your e-commerce platform, this is the right place to start.  With Khalti SDK, you can accepts payments from:   Khalti User  Internet Banking users of our partner banks (your customer does not  need to be a Khalti user)",
            "title": "Introduction"
        },
        {
            "location": "/#features",
            "text": "By using Khalti SDK, your customers will have the choice of paying you using Khalti partner banks'\nebanking account along with their Khalti wallet account.   Highly secure and easy to integrate and accept payments.  SDKs are available for Web (JavaScript), Android and iOS.  Your customers can make wallet payments without leaving your platform.  Your customers can make payment using their e-banking accounts in any of our partner banks.  You don't have to bother integrating with individual banks, Khalti will do that for you.  Khalti provides a merchant dashboard from where you can view transactions, issue refund,\n  filter and download reports etc.  Multi user system  Realtime balance  Withdraw fund",
            "title": "Features"
        },
        {
            "location": "/#support",
            "text": "For Queries, feel free to call us at:     Mobile : 9801165568    Viber/Whatsapp/Skype ID: 9801165568    Email: merchant@khalti.com",
            "title": "Support"
        },
        {
            "location": "/#getting-started",
            "text": "",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/",
            "text": "There are four steps for integrating Khalti payment to a merchant system.\n\n\n\n\n1. Signup as merchant\n\n\n2. Understand how khalti payment works\n\n\n3. Test integration\n\n\n3.1. Client side integration\n\n\n3.2. Server side integration\n\n\n\n\n\n\n4. Deploy integration\n\n\n\n\n1. Signup as merchant\n\n\nFirst of all you will need a merchant and a consumer accounts.\n\nMerchant\n is an online business service like e-commerce websites, ISP online payment, Movie online purchase etc.\n\nConsumer\n is an end user who uses Khalti to purchase products or services from merchants.\n\n\nPlease follow links below to create a merchant and a consumer accounts if you have not already.\n\n\n\n\nCreate a merchant account\n\n\nCreate a consumer account\n\n\n\n\n2. Understand Khalti payment process\n\n\n\n\n3. Test integration\n\n\nNow that you know how Khalti payment works. Its time to integrate it into your system.\nA merchant must complete test integration using test keys. Test keys start with \ntest_\n.\n\n\nIn test mode, transactions are sandboxed, which means fund is not moved from a consumer to the merchant.\nKhalti must to be integrated at client and server. A transaction has three states initiate, confirm and complete. A client initiates and confirms payment while server verifies it and payment process is completed.\n\n\nPayment via E-Banking and Debit/Credit card is not supported in test environment. After you successfully integrate wallet, you need not to concern about E-Banking and Card payment integration.\n\n\n3.1. Client side integration\n\n\nFor now there is only one way to integrate Khalti at client side, through SDKs.\nWe have developed SDKs for every major plaforms and we call it \nCheckout\n.\n\n\nCheckouts provide all the necessary UIs and perform necessary processes to initiate and confirm payment.\n\n\n\n\nWeb\n\n\nAndroid\n\n\niOS\n\n\n\n\n3.2. Server side integration\n\n\nAfter user confirms payment, it has to be verified by Khalti.\n\nFund from user's account is moved to merchant only if verification succeeds.\n\nVerification must be done by the merchant server using a secret key.\n\n\n\n\nVerification api\n\n\nTransaction api\n\n\n\n\n4. Deploy integration\n\n\nAfter successful integration test, the merchant must replace test keys with live ones.\nLive keys start with \nlive_X_X\n. Replace \ntest_public_X\n and \ntest_secret_X\n keys with \nlive_public_X\n and \nlive_secret_X\n keys respectively.\n\n\n4.1. Further processes\n\n\nEven successful integration itself doesn't let you receive payments above NRs. 1000 per transaction. Please fill KYC form and contact us at 9801165568 to remove the limits and accept payments without restrictions.",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#1-signup-as-merchant",
            "text": "First of all you will need a merchant and a consumer accounts. Merchant  is an online business service like e-commerce websites, ISP online payment, Movie online purchase etc. Consumer  is an end user who uses Khalti to purchase products or services from merchants.  Please follow links below to create a merchant and a consumer accounts if you have not already.   Create a merchant account  Create a consumer account",
            "title": "1. Signup as merchant"
        },
        {
            "location": "/getting-started/#2-understand-khalti-payment-process",
            "text": "",
            "title": "2. Understand Khalti payment process"
        },
        {
            "location": "/getting-started/#3-test-integration",
            "text": "Now that you know how Khalti payment works. Its time to integrate it into your system.\nA merchant must complete test integration using test keys. Test keys start with  test_ .  In test mode, transactions are sandboxed, which means fund is not moved from a consumer to the merchant.\nKhalti must to be integrated at client and server. A transaction has three states initiate, confirm and complete. A client initiates and confirms payment while server verifies it and payment process is completed.  Payment via E-Banking and Debit/Credit card is not supported in test environment. After you successfully integrate wallet, you need not to concern about E-Banking and Card payment integration.",
            "title": "3. Test integration"
        },
        {
            "location": "/getting-started/#31-client-side-integration",
            "text": "For now there is only one way to integrate Khalti at client side, through SDKs.\nWe have developed SDKs for every major plaforms and we call it  Checkout .  Checkouts provide all the necessary UIs and perform necessary processes to initiate and confirm payment.   Web  Android  iOS",
            "title": "3.1. Client side integration"
        },
        {
            "location": "/getting-started/#32-server-side-integration",
            "text": "After user confirms payment, it has to be verified by Khalti. Fund from user's account is moved to merchant only if verification succeeds. \nVerification must be done by the merchant server using a secret key.   Verification api  Transaction api",
            "title": "3.2. Server side integration"
        },
        {
            "location": "/getting-started/#4-deploy-integration",
            "text": "After successful integration test, the merchant must replace test keys with live ones.\nLive keys start with  live_X_X . Replace  test_public_X  and  test_secret_X  keys with  live_public_X  and  live_secret_X  keys respectively.",
            "title": "4. Deploy integration"
        },
        {
            "location": "/getting-started/#41-further-processes",
            "text": "Even successful integration itself doesn't let you receive payments above NRs. 1000 per transaction. Please fill KYC form and contact us at 9801165568 to remove the limits and accept payments without restrictions.",
            "title": "4.1. Further processes"
        },
        {
            "location": "/checkout/web/",
            "text": "Khalti checkout can be integrated with or without build tools like\n\nWebpack\n and \nRollup\n.\n\n\nTo get the feel of how Khalti checkout looks click the button below.\n\n\nPay with Khalti\n\n\nWithout build tools\n\n\n<html>\n<head>\n    <script src=\"https://khalti.com/static/khalti-checkout.js\"></script>\n</head>\n<body>\n    ...\n    <!-- Place this where you need payment button -->\n    <button id=\"payment-button\">Pay with Khalti</button>\n    <!-- Place this where you need payment button -->\n    <!-- Paste this code anywhere in you body tag -->\n    <script>\n        var config = {\n            // replace the publicKey with yours\n            \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\",\n            \"productIdentity\": \"1234567890\",\n            \"productName\": \"Dragon\",\n            \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n            \"eventHandler\": {\n                onSuccess (payload) {\n                    // hit merchant api for initiating verfication\n                    console.log(payload);\n                },\n                onError (error) {\n                    console.log(error);\n                },\n                onClose () {\n                    console.log('widget is closing');\n                }\n            }\n        };\n\n        var checkout = new KhaltiCheckout(config);\n        var btn = document.getElementById(\"payment-button\");\n        btn.onclick = function () {\n            checkout.show({amount: 1000});\n        }\n    </script>\n    <!-- Paste this code anywhere in you body tag -->\n    ...\n</body>\n</html>\n\n\n\n\nClick here\n for details on config parameters.\n\n\nWith build tools\n\n\nKhalti checkout can be bundled with build tools like Webpack, Rollup, etc.\n\n\n1. Install \nkhalti-web\n\n\nUsing yarn\n\n\nyarn add khalti-web\n\n\nUsing npm\n\n\nnpm install khalti-web --save\n\n\n2. Import and use it in your desired component\n\n\nimport KhaltiCheckout from \"khalti-web\";\n\n// for dynamic loading  \n// import * as KhaltiCheckout from \"khalti-web\"; TypeScript\n// var KhaltiCheckout = require(\"khalti-web\"); CommonJs\n\nlet config = {\n    // replace this key with yours\n    \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\",\n    \"productIdentity\": \"1234567890\",\n    \"productName\": \"Drogon\",\n    \"productUrl\": \"http://gameofthrones.com/buy/Dragons\",\n    \"eventHandler\": {\n        onSuccess (payload) {\n            // hit merchant api for initiating verfication\n            console.log(payload);\n        },\n        // onError handler is optional\n        onError (error) {\n            // handle errors\n            console.log(error);\n        },\n        onClose () {\n            console.log('widget is closing');\n        }\n    }\n};\n\nlet checkout = new KhaltiCheckout(config);\nlet btn = document.getElementById(\"payment-button\");\nbtn.onclick = function () {\n    checkout.show({amount: 1000});\n}\n\n\n\n\nAPI\n\n\n\n\n\n\nKhaltiCheckout(configuration?)\n\n\n\n\nInstantiate \nKhaltiCheckout\n class and pass a \nconfiguration\n.\n\n\n\n\n\n\n\n\nshow(configuration?)\n\n\n\n\nDisplays the Khalti checkout widget.\n\n\nReceives configuration as argument.\n\n\nProvide amount and mobile to prefill the checkout widget field\n\n\ncheckout.show({amount: 1000, mobile: 98XXXXXXXX})\n\n\n\n\n\n\nmobile\n is optional fields and expects Khalti Registered Number for wallet payment.\n\n\n\n\n\n\n\n\nhide()\n\n\n\n\nHide the widget.\n\n\n\n\n\n\n\n\nConfiguration\n\n\nConfiguration is a Javascript object with following attributes.\n\n\n\n\n\n\n\n\nKey\n\n\nRequired\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\npublickKey\n\n\ntrue\n\n\nstring\n\n\nTest or live public key which identifies the merchant.\n\n\n\n\n\n\namount\n\n\ntrue\n\n\ninteger\n\n\nAmount to pay \nin paisa\n. Minimum transaction amount is 1000 paisa ie Rs 10\n\n\n\n\n\n\nproductIdentity\n\n\ntrue\n\n\nstring\n\n\nUnique product identifier at merchant.\n\n\n\n\n\n\nproductName\n\n\ntrue\n\n\nstring\n\n\nName of product.\n\n\n\n\n\n\nproductUrl\n\n\nfalse\n\n\nstring\n\n\nUrl of product.\n\n\n\n\n\n\neventHandler\n\n\ntrue\n\n\nobject\n\n\nIt is a javascript object with three methods\n\n\n\n\n\n\nmobile\n\n\nfalse\n\n\ninteger\n\n\nMobile number of consumer.\n\n\n\n\n\n\n\n\n\n\n1) \nonSuccess\n\n    This method is called once a transaction is confirmed by a user.\n    The success response is in the following format:\n\n\n\n\n{\n    \"amount\": 1000,\n    \"mobile\": \"98XXXXX969\",\n    \"product_identity\": \"1234567890\",\n    \"product_name\": \"Dragon\",\n    \"product_url\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n    \"token\": \"QUao9cqFzxPgvWJNi9aKac\"\n}\n\n\n\nIt receives transaction \ntoken\n and \namount\n among other payloads.\nOne should implement this method to initiate payment verification\nat merchant which in turn will make verification request at Khalti.\nFor documentation on verification follow this \nlink\n.\n\n\n\n\n2) \nonError (optional)\n\n    This method is optional. If implemented, it will receive errors that occured during payment initiation and confirmation. Example error format for \nInvalid Transaction PIN or Confirmation Code\n:\n\n\n\n\n{\n  \"action\": \"WALLET_PAYMENT_CONFIRM\",\n  \"message\": undefined,\n  \"payload\": {\n    \"detail\": \"Confirmation code or transaction pin does not match.\"\n  },\n  \"status_code\": 400\n}\n\n\n\n\n\n3) \nonClose (optional)\n\n        This method is also optional. If implemented, this method is called when \nclose icon(X)\n of the widget is called.\n\n\n\n\nAdditionally\n Configuration also accepts attribute starting with \nmerchant_\n that can be used to pass additional (meta) data.\n\n\n\n\n\n\nmerchant_name\n: This is merchant name\n\n\n\n\n\n\nmerchant_extra\n: This is extra data\n\n\n\n\n\n\nThe additional data starting with \nmerchant_\n is returned in success response payload.\n\n\nCheck out the source for \nKhalti checkout on Github\n.\n\n\nNow, for server side integration check \nVerification\n and \nTransaction\n api.\n\n\n\n\n\n\n        var config = {\n            // replace the publicKey with yours\n            \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\",\n            \"productIdentity\": \"1234567890\",\n            \"productName\": \"Dragon\",\n            \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n            \"eventHandler\": {\n                onSuccess (payload) {\n                    // hit merchant api for initiating verfication\n                    console.log(payload);\n                },\n                onError (error) {\n                    console.log(error);\n                },\n                onClose () {\n                    console.log('widget is closing');\n                }\n            }\n        };\n\n        var checkout = new KhaltiCheckout(config);\n        var btn = document.getElementById(\"payment-button\");\n        btn.onclick = function () {\n            checkout.show({amount: 1000});\n        }",
            "title": "Web"
        },
        {
            "location": "/checkout/web/#without-build-tools",
            "text": "<html>\n<head>\n    <script src=\"https://khalti.com/static/khalti-checkout.js\"></script>\n</head>\n<body>\n    ...\n    <!-- Place this where you need payment button -->\n    <button id=\"payment-button\">Pay with Khalti</button>\n    <!-- Place this where you need payment button -->\n    <!-- Paste this code anywhere in you body tag -->\n    <script>\n        var config = {\n            // replace the publicKey with yours\n            \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\",\n            \"productIdentity\": \"1234567890\",\n            \"productName\": \"Dragon\",\n            \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n            \"eventHandler\": {\n                onSuccess (payload) {\n                    // hit merchant api for initiating verfication\n                    console.log(payload);\n                },\n                onError (error) {\n                    console.log(error);\n                },\n                onClose () {\n                    console.log('widget is closing');\n                }\n            }\n        };\n\n        var checkout = new KhaltiCheckout(config);\n        var btn = document.getElementById(\"payment-button\");\n        btn.onclick = function () {\n            checkout.show({amount: 1000});\n        }\n    </script>\n    <!-- Paste this code anywhere in you body tag -->\n    ...\n</body>\n</html>  Click here  for details on config parameters.",
            "title": "Without build tools"
        },
        {
            "location": "/checkout/web/#with-build-tools",
            "text": "Khalti checkout can be bundled with build tools like Webpack, Rollup, etc.",
            "title": "With build tools"
        },
        {
            "location": "/checkout/web/#1-install-khalti-web",
            "text": "",
            "title": "1. Install khalti-web"
        },
        {
            "location": "/checkout/web/#using-yarn",
            "text": "yarn add khalti-web",
            "title": "Using yarn"
        },
        {
            "location": "/checkout/web/#using-npm",
            "text": "npm install khalti-web --save",
            "title": "Using npm"
        },
        {
            "location": "/checkout/web/#2-import-and-use-it-in-your-desired-component",
            "text": "import KhaltiCheckout from \"khalti-web\";\n\n// for dynamic loading  \n// import * as KhaltiCheckout from \"khalti-web\"; TypeScript\n// var KhaltiCheckout = require(\"khalti-web\"); CommonJs\n\nlet config = {\n    // replace this key with yours\n    \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\",\n    \"productIdentity\": \"1234567890\",\n    \"productName\": \"Drogon\",\n    \"productUrl\": \"http://gameofthrones.com/buy/Dragons\",\n    \"eventHandler\": {\n        onSuccess (payload) {\n            // hit merchant api for initiating verfication\n            console.log(payload);\n        },\n        // onError handler is optional\n        onError (error) {\n            // handle errors\n            console.log(error);\n        },\n        onClose () {\n            console.log('widget is closing');\n        }\n    }\n};\n\nlet checkout = new KhaltiCheckout(config);\nlet btn = document.getElementById(\"payment-button\");\nbtn.onclick = function () {\n    checkout.show({amount: 1000});\n}",
            "title": "2. Import and use it in your desired component"
        },
        {
            "location": "/checkout/web/#api",
            "text": "KhaltiCheckout(configuration?)   Instantiate  KhaltiCheckout  class and pass a  configuration .     show(configuration?)   Displays the Khalti checkout widget.  Receives configuration as argument.  Provide amount and mobile to prefill the checkout widget field  checkout.show({amount: 1000, mobile: 98XXXXXXXX})    mobile  is optional fields and expects Khalti Registered Number for wallet payment.     hide()   Hide the widget.",
            "title": "API"
        },
        {
            "location": "/checkout/web/#configuration",
            "text": "Configuration is a Javascript object with following attributes.     Key  Required  Type  Value      publickKey  true  string  Test or live public key which identifies the merchant.    amount  true  integer  Amount to pay  in paisa . Minimum transaction amount is 1000 paisa ie Rs 10    productIdentity  true  string  Unique product identifier at merchant.    productName  true  string  Name of product.    productUrl  false  string  Url of product.    eventHandler  true  object  It is a javascript object with three methods    mobile  false  integer  Mobile number of consumer.      1)  onSuccess \n    This method is called once a transaction is confirmed by a user.\n    The success response is in the following format:   {\n    \"amount\": 1000,\n    \"mobile\": \"98XXXXX969\",\n    \"product_identity\": \"1234567890\",\n    \"product_name\": \"Dragon\",\n    \"product_url\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n    \"token\": \"QUao9cqFzxPgvWJNi9aKac\"\n}  It receives transaction  token  and  amount  among other payloads.\nOne should implement this method to initiate payment verification\nat merchant which in turn will make verification request at Khalti.\nFor documentation on verification follow this  link .   2)  onError (optional) \n    This method is optional. If implemented, it will receive errors that occured during payment initiation and confirmation. Example error format for  Invalid Transaction PIN or Confirmation Code :   {\n  \"action\": \"WALLET_PAYMENT_CONFIRM\",\n  \"message\": undefined,\n  \"payload\": {\n    \"detail\": \"Confirmation code or transaction pin does not match.\"\n  },\n  \"status_code\": 400\n}   3)  onClose (optional) \n        This method is also optional. If implemented, this method is called when  close icon(X)  of the widget is called.   Additionally  Configuration also accepts attribute starting with  merchant_  that can be used to pass additional (meta) data.    merchant_name : This is merchant name    merchant_extra : This is extra data    The additional data starting with  merchant_  is returned in success response payload.  Check out the source for  Khalti checkout on Github .  Now, for server side integration check  Verification  and  Transaction  api.   \n        var config = {\n            // replace the publicKey with yours\n            \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\",\n            \"productIdentity\": \"1234567890\",\n            \"productName\": \"Dragon\",\n            \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n            \"eventHandler\": {\n                onSuccess (payload) {\n                    // hit merchant api for initiating verfication\n                    console.log(payload);\n                },\n                onError (error) {\n                    console.log(error);\n                },\n                onClose () {\n                    console.log('widget is closing');\n                }\n            }\n        };\n\n        var checkout = new KhaltiCheckout(config);\n        var btn = document.getElementById(\"payment-button\");\n        btn.onclick = function () {\n            checkout.show({amount: 1000});\n        }",
            "title": "Configuration"
        },
        {
            "location": "/checkout/android/",
            "text": "Documentation of Khalti checkout for android\n\n\nInstallation\n\n\nAdd the following line to \ndependency\n section in \nbuild.gradle\n file\n\n\ncompile 'com.khalti:khalti-android:1.2.3'\n\n\n\n\nIt is recommended that you update your support libraries to the latest version. However, if you're unable to update the libraries add the following line instead.\n\n\ncompile ('com.khalti:khalti-android:1.2.3') {\n        transitive = true\n    }\n\n\n\n\nNote : We recommend you to use the latest version of \nBuild tools\n and \nSupport libraries\n for maximum compatibility. \n\n\nIn order to build and run this project, please use \nAndroid Studio 3\n and please note that the minimum \nBuild tools\n and \nSupport libraries\n version should be \n27\n.\n\n\ncompileSdkVersion 27\nbuildToolsVersion '27.0.3'\n\ncompile 'com.android.support:appcompat-v7:27.0.2'\n\n\n\n\nIn order to add support library 27, add the Google's maven url in \nbuild.gradle\n\n\nrepositories {\n        jcenter()\n        mavenCentral()\n        maven { url \"https://maven.google.com\" }\n    }\n\n\n\n\nImportant\n Add the lines below in android default config of 'build.gradle'\n\n\nrenderscriptTargetApi 20\nrenderscriptSupportModeEnabled true\n\n\n\n\nUsage\n\n\nLayout\n\n\nYou can add KhaltiButton to your xml layout\n\n\n<khalti.widget.KhaltiButton\n            android:id=\"@+id/khalti_button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"/>\n\n\n\n\n\nAnd, Locate your xml Khalti Button in your Java\n\n\nKhaltiButton khaltiButton = (KhaltiButton) findViewById(R.id.khalti_button);\n\n\n\n\nOr, use it in Java\n\n\nKhaltiButton khaltiButton = new KhaltiButton();\n\n\n\n\nAnd, add this java KhaltiButton into your layout container.\n\n\nConfigure\n\n\nConfigure Khalti Checkout by passing an instance of Config class\n\n\nWhen instantiating Config class pass public key, product id, product name, product web url, amount (in paisa) and a new instance of OnCheckOutListener.\n\n\nConfig config = new Config(\"Public Key\", \"Product ID\", \"Product Name\", \"Product Url\", amount, new OnCheckOutListener() {\n\n            @Override\n            public void onSuccess(HashMap<String, Object> data) {\n                Log.i(\"Payment confirmed\", data+\"\");\n            }\n\n            @Override\n            public void onError(String action, String message) {\n                Log.i(action, message);\n            }\n        });\n\n\n\n\nAdditionally, Config class also accepts a HashMap parameter which you can use to pass any additional data. Make sure you add a \nmerchant_\n prefix in your map key.\n\n\nHashMap<String, String> map = new HashMap<>();\n        map.put(\"merchant_extra\", \"This is extra data\");\n\n        Config config = new Config(\"Public Key\", \"Product ID\", \"Product Name\", \"Product Url\", amount, map, new OnCheckOutListener() {\n\n            @Override\n            public void onSuccess(HashMap<String, Object> data) {\n                Log.i(\"Payment confirmed\", data);\n            }\n\n            @Override\n            public void onError(String action, String message) {\n                Log.i(action, message);\n            }\n        });\n\n\n\n\n\nConfig\n\n\n\n\n\n\n\n\nConstraint\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRequired\n\n\nPublic key\n\n\nString\n\n\nTest or live public key which identifies the merchant\n\n\n\n\n\n\nRequired\n\n\nProduct identity\n\n\nString\n\n\nUnique product identifier at merchant\n\n\n\n\n\n\nRequired\n\n\nProduct name\n\n\nString\n\n\nName of product\n\n\n\n\n\n\nOptional\n\n\nProduct url\n\n\nString\n\n\nURL of product\n\n\n\n\n\n\nRequired\n\n\nAmount (In PAISA)\n\n\nLong\n\n\nAmount to pay in PAISA. Minimum transaction amount is 1000 PAISA i.e. Rs 10\nFor non Kyc Verified merchant, the maximum transaction amount limit is 100000 PAISA i.e. Rs 1000\n\n\n\n\n\n\nOptional\n\n\nMobile\n\n\nString\n\n\nMobile number to be preset in mobile fields\n\n\n\n\n\n\nOptional\n\n\nAdditional data\n\n\nHashMap\n\n\nAny additional data the merchant wishes to pass to the SDK\n\n\n\n\n\n\nRequired\n\n\nOnCheckOutListener\n\n\ninterface\n\n\nJava interface with 2 callback methods \nonSuccess\n & \nonError\n. For more information see \nCallback Methods\n\n\n\n\n\n\n\n\nNote : In order to preset mobile number, you can also use \nconfig.setMobile()\n.\n\n\nAvailable Config Preset Methods\n\n\n\n\n\n\n\n\nConstraint\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOptional\n\n\nsetMobile()\n\n\nPreset mobile number\n\n\n\n\n\n\n\n\nSet Config\n\n\nFinally set your config in your KhaltiButton.\n\n\nkhaltiButton.setCheckOutConfig(config);\n\n\n\n\nSummary\n\n\nXML Attribute\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkhalti:text\n\n\nText to display\n\n\n\n\n\n\nkhalti:button_style\n\n\nSet the style of KhaltiButton from 2 options\n\n\n\n\n\n\n\n\nPublic Methods\n\n\n\n\n\n\n\n\nConstraint\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRequired\n\n\nsetCheckOutConfig(Config config)\n\n\nSet configuration required by Khalti checkout\n\n\n\n\n\n\nOptional\n\n\nsetText(String text)\n\n\nSet text to display in KhaltiButton\n\n\n\n\n\n\nOptional\n\n\nsetCustomView(View view)\n\n\nReplace KhaltiButton's default view with your custom view\n\n\n\n\n\n\nOptional\n\n\nsetButtonStyle(ButtonStyle buttonStyle)\n\n\nSelect between 2 options to set KhaltiButton's style\n\n\n\n\n\n\nOptional\n\n\nshowCheckOut()\n\n\nUse this method to show Khalti checkout UI\n\n\n\n\n\n\nOptional\n\n\ndestroyCheckOut()\n\n\nUse this method to close Khalti checkout UI\n\n\n\n\n\n\n\n\nCallback Methods\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonSuccess(HashMap data)\n\n\nThis method is called when a transaction has been completed and confirmed by the user. A map containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the \nverification\n process for further instructions.\n\n\n\n\n\n\nonError(String action, String message)\n\n\nThis method is called when an error occurs during payment initiation and confirmation. Action and message value is passed where action defines, the current action being performed and message defines the error.\n\n\n\n\n\n\n\n\nResponse Sample\n\n\nSuccess Messsage\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmobile\n\n\n98XXXXXXXX\n\n\nString\n\n\n\n\n\n\nproduct_name\n\n\nProduct Name\n\n\nString\n\n\n\n\n\n\nproduct_identity\n\n\nProduct Id\n\n\nString\n\n\n\n\n\n\nproduct_url\n\n\nProduct Url\n\n\nString\n\n\n\n\n\n\namount\n\n\n100\n\n\nLong\n\n\n\n\n\n\ntoken\n\n\ntoken\n\n\nString\n\n\n\n\n\n\n\n\nThe success message also contains all the \nkey\n and \nvalue\n provide as extra data while initiating \nConfig\n \n\n\nError Messsage\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naction\n\n\nAction performed - initiate, confirm\n\n\nString\n\n\n\n\n\n\nmessage\n\n\nDetail Error Message\n\n\nString\n\n\n\n\n\n\n\n\nMore Implementations\n\n\nMethod 1: With Custom Click Listener\n\n\nInitialize the KhaltiCheckout Object\n\n\nKhaltiCheckOut khaltiCheckOut = new KhaltiCheckOut(this, config);\n\n\n\n\nUse \nkhaltiCheckout.show()\n to display khalti widget\n\n\nkhaltiButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                khaltiCheckOut.show();\n            }\n        });\n\n\n\n\nMethod 2: With Custom View\n\n\nGet your custom view\n\n\nView view = LayoutInflater.from(this).inflate(R.layout.custom_khalti_button, container, false);\n\n\n\n\nSet custom view to your khalti button\n\n\nkhaltiButton.setCustomView(view);\nkhaltiButton.setCheckOutConfig(config);\n\n\n\n\nCheck out the source for \nKhalti checkout on Github\n.\n\n\nCheck out the \nVerification\n process.\n\n\nChangelog",
            "title": "Android"
        },
        {
            "location": "/checkout/android/#installation",
            "text": "Add the following line to  dependency  section in  build.gradle  file  compile 'com.khalti:khalti-android:1.2.3'  It is recommended that you update your support libraries to the latest version. However, if you're unable to update the libraries add the following line instead.  compile ('com.khalti:khalti-android:1.2.3') {\n        transitive = true\n    }  Note : We recommend you to use the latest version of  Build tools  and  Support libraries  for maximum compatibility.   In order to build and run this project, please use  Android Studio 3  and please note that the minimum  Build tools  and  Support libraries  version should be  27 .  compileSdkVersion 27\nbuildToolsVersion '27.0.3'\n\ncompile 'com.android.support:appcompat-v7:27.0.2'  In order to add support library 27, add the Google's maven url in  build.gradle  repositories {\n        jcenter()\n        mavenCentral()\n        maven { url \"https://maven.google.com\" }\n    }  Important  Add the lines below in android default config of 'build.gradle'  renderscriptTargetApi 20\nrenderscriptSupportModeEnabled true",
            "title": "Installation"
        },
        {
            "location": "/checkout/android/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/checkout/android/#layout",
            "text": "You can add KhaltiButton to your xml layout  <khalti.widget.KhaltiButton\n            android:id=\"@+id/khalti_button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"/>  And, Locate your xml Khalti Button in your Java  KhaltiButton khaltiButton = (KhaltiButton) findViewById(R.id.khalti_button);  Or, use it in Java  KhaltiButton khaltiButton = new KhaltiButton();  And, add this java KhaltiButton into your layout container.",
            "title": "Layout"
        },
        {
            "location": "/checkout/android/#configure",
            "text": "Configure Khalti Checkout by passing an instance of Config class  When instantiating Config class pass public key, product id, product name, product web url, amount (in paisa) and a new instance of OnCheckOutListener.  Config config = new Config(\"Public Key\", \"Product ID\", \"Product Name\", \"Product Url\", amount, new OnCheckOutListener() {\n\n            @Override\n            public void onSuccess(HashMap<String, Object> data) {\n                Log.i(\"Payment confirmed\", data+\"\");\n            }\n\n            @Override\n            public void onError(String action, String message) {\n                Log.i(action, message);\n            }\n        });  Additionally, Config class also accepts a HashMap parameter which you can use to pass any additional data. Make sure you add a  merchant_  prefix in your map key.  HashMap<String, String> map = new HashMap<>();\n        map.put(\"merchant_extra\", \"This is extra data\");\n\n        Config config = new Config(\"Public Key\", \"Product ID\", \"Product Name\", \"Product Url\", amount, map, new OnCheckOutListener() {\n\n            @Override\n            public void onSuccess(HashMap<String, Object> data) {\n                Log.i(\"Payment confirmed\", data);\n            }\n\n            @Override\n            public void onError(String action, String message) {\n                Log.i(action, message);\n            }\n        });",
            "title": "Configure"
        },
        {
            "location": "/checkout/android/#config",
            "text": "Constraint  Parameter  Type  Description      Required  Public key  String  Test or live public key which identifies the merchant    Required  Product identity  String  Unique product identifier at merchant    Required  Product name  String  Name of product    Optional  Product url  String  URL of product    Required  Amount (In PAISA)  Long  Amount to pay in PAISA. Minimum transaction amount is 1000 PAISA i.e. Rs 10 For non Kyc Verified merchant, the maximum transaction amount limit is 100000 PAISA i.e. Rs 1000    Optional  Mobile  String  Mobile number to be preset in mobile fields    Optional  Additional data  HashMap  Any additional data the merchant wishes to pass to the SDK    Required  OnCheckOutListener  interface  Java interface with 2 callback methods  onSuccess  &  onError . For more information see  Callback Methods     Note : In order to preset mobile number, you can also use  config.setMobile() .",
            "title": "Config"
        },
        {
            "location": "/checkout/android/#available-config-preset-methods",
            "text": "Constraint  Method  Description      Optional  setMobile()  Preset mobile number",
            "title": "Available Config Preset Methods"
        },
        {
            "location": "/checkout/android/#set-config",
            "text": "Finally set your config in your KhaltiButton.  khaltiButton.setCheckOutConfig(config);",
            "title": "Set Config"
        },
        {
            "location": "/checkout/android/#summary",
            "text": "",
            "title": "Summary"
        },
        {
            "location": "/checkout/android/#xml-attribute",
            "text": "Attribute  Description      khalti:text  Text to display    khalti:button_style  Set the style of KhaltiButton from 2 options",
            "title": "XML Attribute"
        },
        {
            "location": "/checkout/android/#public-methods",
            "text": "Constraint  Method  Description      Required  setCheckOutConfig(Config config)  Set configuration required by Khalti checkout    Optional  setText(String text)  Set text to display in KhaltiButton    Optional  setCustomView(View view)  Replace KhaltiButton's default view with your custom view    Optional  setButtonStyle(ButtonStyle buttonStyle)  Select between 2 options to set KhaltiButton's style    Optional  showCheckOut()  Use this method to show Khalti checkout UI    Optional  destroyCheckOut()  Use this method to close Khalti checkout UI",
            "title": "Public Methods"
        },
        {
            "location": "/checkout/android/#callback-methods",
            "text": "Method  Description      onSuccess(HashMap data)  This method is called when a transaction has been completed and confirmed by the user. A map containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the  verification  process for further instructions.    onError(String action, String message)  This method is called when an error occurs during payment initiation and confirmation. Action and message value is passed where action defines, the current action being performed and message defines the error.",
            "title": "Callback Methods"
        },
        {
            "location": "/checkout/android/#response-sample",
            "text": "",
            "title": "Response Sample"
        },
        {
            "location": "/checkout/android/#success-messsage",
            "text": "Key  Value  Type      mobile  98XXXXXXXX  String    product_name  Product Name  String    product_identity  Product Id  String    product_url  Product Url  String    amount  100  Long    token  token  String     The success message also contains all the  key  and  value  provide as extra data while initiating  Config",
            "title": "Success Messsage"
        },
        {
            "location": "/checkout/android/#error-messsage",
            "text": "Variable  Description  Type      action  Action performed - initiate, confirm  String    message  Detail Error Message  String",
            "title": "Error Messsage"
        },
        {
            "location": "/checkout/android/#more-implementations",
            "text": "",
            "title": "More Implementations"
        },
        {
            "location": "/checkout/android/#method-1-with-custom-click-listener",
            "text": "Initialize the KhaltiCheckout Object  KhaltiCheckOut khaltiCheckOut = new KhaltiCheckOut(this, config);  Use  khaltiCheckout.show()  to display khalti widget  khaltiButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                khaltiCheckOut.show();\n            }\n        });",
            "title": "Method 1: With Custom Click Listener"
        },
        {
            "location": "/checkout/android/#method-2-with-custom-view",
            "text": "Get your custom view  View view = LayoutInflater.from(this).inflate(R.layout.custom_khalti_button, container, false);  Set custom view to your khalti button  khaltiButton.setCustomView(view);\nkhaltiButton.setCheckOutConfig(config);  Check out the source for  Khalti checkout on Github .  Check out the  Verification  process.",
            "title": "Method 2: With Custom View"
        },
        {
            "location": "/checkout/android/#changelog",
            "text": "",
            "title": "Changelog"
        },
        {
            "location": "/checkout/ios/",
            "text": "Khalti\n\n\n\n\n\n\n\n\n\n\n\n\nThis documentation details the process to integrate Khalti payment gateway\nin your iOS app.\n\n\nExample\n\n\nSwift\n : Clone project and use 'Example' directory. Do 'pod install'.\n\n\nObjective-C\n :  Clone project and use 'Example Obj-c' directory. Do 'pod install'.\n\n\nInstallation guide\n\n\nKhalti is available through \nCocoaPods\n. To install\nit, simply add the following line to your Podfile:\n\n\npod 'Khalti'\n\n\n\n\nUsage\n\n\nAdding CustomSchme\n\n\nKhalti uses custom Scheme: So merhant should setup \nURLScheme\n unique for their app. We have made usability as of user case.\n\n\n \n\n\nAfter adding Url Scheme create global constant for same customUrlScheme as below \n\n\nlet khaltiUrlScheme:String = \"KhaltiPayExampleScheme\"\n\n\n\n\nRequirements\n\n\nTo work around with this redirection you have to implement some openUrl in \nAppdelegate.swift\n. \n\n\nKhalti.shared.defaultAction()\n returns \ntrue\n if you initiate payment through Khalti.\n\nKhalti.shared.action(with: url)\n is needed for complete action after ebanking and card payment. \n\n\nNote:\n Using \nKhalti.shared.action(with: url)\n  is mandatory.\n\n\nAdd following code to \nAppdelegate.swift\n\n\n func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool {\n    Khalti.shared.action(with: url)\n    return Khalti.shared.defaultAction() // Or true \n}\n\n\n\n\nUsing at particular ViewController\n\n\nAt your viewController during action of pay add initiate config file\n\n\nWhen instantiating \nConfig\n  pass public key, product id, product name, amount (in paisa).\nProduct web url and additional data are optional.\n\n\nlet TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData)\n// Data passed here are based on Example project\n\n\n\n\nNote:\n  Public is provided to every merchant of khalti. Intially test is available to every merchant and live key is provided after MoU signup with Khalti.\n\n\nAt this stage the scheme named you declared earlier is passed to \nKhatli.shared.appUrlScheme\n\n\nKhalti.shared.appUrlScheme = khaltiUrlScheme // see above for file khaltiUrlScheme\n// This can be used at appdelegate during didfinishlaunching. \n// This should be mandatory\n\n\n\n\nFinally present the khaltiPay Viewcontroller by calling public funcation \n\n\nKhalti.present(caller: self, with: TEST_CONFIG, delegate: self)\n\n\n\n\nParams of present function of Khalti\n\n\n\n\n\n\n\n\nparam\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ncaller\n\n\nviewController  from where you initate payment.\n\n\n\n\n\n\nwith\n\n\nConfig object\n\n\n\n\n\n\ndelegate\n\n\nself\n\n\n\n\n\n\n\n\nDelegate must be assigned to same Viewcontroller to get callback action from KhaltiPayDelegate.\n\n\nExample as used in Example Project\n\n\nlet extra:[String : Any] =  [\"no\":false,\"yes\":true,\"int\" : 0, \"float\":12.23]\n\nlet jsonData = try? JSONSerialization.data(withJSONObject: extra, options: JSONSerialization.WritingOptions())\nlet jsonString = String(data: jsonData!, encoding: .utf8)!\n\nlet additionalData:Dictionary<String,String> = [\n    \"merchant_name\" : \"HelloPaaaaisaPVTLtd.\",\n    \"merchant_extra\" : jsonString\n]\n\nKhalti.shared.appUrlScheme = khaltiUrlScheme\nlet khaltiMerchantKey = \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\" // This key is from local server so it won't work if you use the example as is it. Use your own public test key\n\nlet TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData, cardPayment:false)\nKhalti.present(caller: self, with: TEST_CONFIG, delegate: self)\n\n\n\n\nConfig file has property cardPayment with default value false, indication the cardPayment facility is OFF. If you want cardPayment available to your users then set cardPayment option to true while creating config object. Please read merchant terms and conditions before enabling this feature.\nAdditionally, Config class also accepts a Dictionary\n which you can use to pass any additional data. Make sure you add a \nmerchant_\n prefix in your map key.\n\n\nUsing delegates\n\n\nThe viewController you implement pay action should contain KhaltiPayDelegate implementing\n \nonCheckOutSuccess(data: Dictionary<String, Any>)\n\n \nonCheckOutError(action: String, message: String)\n\n\nextension YourViewController: KhaltiPayDelegate {\n    func onCheckOutSuccess(data: Dictionary<String, Any>) {\n        print(data)\n        print(\"Oh there is success message received\")\n    }\n\n    func onCheckOutError(action: String, message: String) {\n        print(action)\n        print(message)\n        print(\"Oh there occure error in payment\")\n    }\n}\n\n\n\n\nSummary\n\n\nCallback Methods\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonCheckOutSuccess(data: Dictionary<String, Any>)\n\n\nThis method is called when a transaction has been completed and confirmed by the user. A dictionary containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the \nverification\n process for further instructions.\n\n\n\n\n\n\nonCheckOutError(action: String, message: String, data:Dictionary<String,Any>?)\n\n\nThis method is called when an error occurs during payment initiation and confirmation. Action, message and errordata value is passed where action defines, the current action being performed, message defines the error and data defines the errorData associated with error if exists.\n\n\n\n\n\n\n\n\nResponse Sample\n\n\nSuccess Messsage\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmobile\n\n\n98XXXXXXXX\n\n\nString\n\n\n\n\n\n\nproduct_name\n\n\nProduct Name\n\n\nString\n\n\n\n\n\n\nproduct_identity\n\n\nProduct Id\n\n\nString\n\n\n\n\n\n\nproduct_url\n\n\nProduct Url\n\n\nString\n\n\n\n\n\n\namount\n\n\n100\n\n\nInt\n\n\n\n\n\n\ntoken\n\n\ntoken\n\n\nString\n\n\n\n\n\n\ncardPayment\n\n\nfalse\n\n\nBool\n\n\n\n\n\n\n\n\nThe success message also contains all the \nkey\n and \nvalue\n provide as extra data while initiating \nConfig\n. \n\n\nError Messsage\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\naction\n\n\ninitiate/confirm/ebanking\n\n\nString\n\n\n\n\n\n\nmessage\n\n\nDetail Error Message\n\n\nString\n\n\n\n\n\n\ndata\n\n\ndata of error   (Optional)\n\n\nDictionary\n?\n\n\n\n\n\n\n\n\nSupport\n\n\nFor Queries, feel free to call us at:\n\n\nMobile : 9801165568\nViber/Whatsapp/Skype ID: 9801165568\nEmail: \nmerchant@khalti.com\n\n\nCheck out the \nAPI Documentation\n.\n\n\nAnd you can study the source code on \ngithub \n by yourself.",
            "title": "iOS"
        },
        {
            "location": "/checkout/ios/#khalti",
            "text": "This documentation details the process to integrate Khalti payment gateway\nin your iOS app.",
            "title": "Khalti"
        },
        {
            "location": "/checkout/ios/#example",
            "text": "Swift  : Clone project and use 'Example' directory. Do 'pod install'.  Objective-C  :  Clone project and use 'Example Obj-c' directory. Do 'pod install'.",
            "title": "Example"
        },
        {
            "location": "/checkout/ios/#installation-guide",
            "text": "Khalti is available through  CocoaPods . To install\nit, simply add the following line to your Podfile:  pod 'Khalti'",
            "title": "Installation guide"
        },
        {
            "location": "/checkout/ios/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/checkout/ios/#adding-customschme",
            "text": "Khalti uses custom Scheme: So merhant should setup  URLScheme  unique for their app. We have made usability as of user case.     After adding Url Scheme create global constant for same customUrlScheme as below   let khaltiUrlScheme:String = \"KhaltiPayExampleScheme\"",
            "title": "Adding CustomSchme"
        },
        {
            "location": "/checkout/ios/#requirements",
            "text": "To work around with this redirection you have to implement some openUrl in  Appdelegate.swift .   Khalti.shared.defaultAction()  returns  true  if you initiate payment through Khalti. Khalti.shared.action(with: url)  is needed for complete action after ebanking and card payment.   Note:  Using  Khalti.shared.action(with: url)   is mandatory.  Add following code to  Appdelegate.swift   func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool {\n    Khalti.shared.action(with: url)\n    return Khalti.shared.defaultAction() // Or true \n}",
            "title": "Requirements"
        },
        {
            "location": "/checkout/ios/#using-at-particular-viewcontroller",
            "text": "At your viewController during action of pay add initiate config file  When instantiating  Config   pass public key, product id, product name, amount (in paisa).\nProduct web url and additional data are optional.  let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData)\n// Data passed here are based on Example project  Note:   Public is provided to every merchant of khalti. Intially test is available to every merchant and live key is provided after MoU signup with Khalti.  At this stage the scheme named you declared earlier is passed to  Khatli.shared.appUrlScheme  Khalti.shared.appUrlScheme = khaltiUrlScheme // see above for file khaltiUrlScheme\n// This can be used at appdelegate during didfinishlaunching. \n// This should be mandatory  Finally present the khaltiPay Viewcontroller by calling public funcation   Khalti.present(caller: self, with: TEST_CONFIG, delegate: self)  Params of present function of Khalti     param  Value      caller  viewController  from where you initate payment.    with  Config object    delegate  self     Delegate must be assigned to same Viewcontroller to get callback action from KhaltiPayDelegate.",
            "title": "Using at particular ViewController"
        },
        {
            "location": "/checkout/ios/#example-as-used-in-example-project",
            "text": "let extra:[String : Any] =  [\"no\":false,\"yes\":true,\"int\" : 0, \"float\":12.23]\n\nlet jsonData = try? JSONSerialization.data(withJSONObject: extra, options: JSONSerialization.WritingOptions())\nlet jsonString = String(data: jsonData!, encoding: .utf8)!\n\nlet additionalData:Dictionary<String,String> = [\n    \"merchant_name\" : \"HelloPaaaaisaPVTLtd.\",\n    \"merchant_extra\" : jsonString\n]\n\nKhalti.shared.appUrlScheme = khaltiUrlScheme\nlet khaltiMerchantKey = \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\" // This key is from local server so it won't work if you use the example as is it. Use your own public test key\n\nlet TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData, cardPayment:false)\nKhalti.present(caller: self, with: TEST_CONFIG, delegate: self)  Config file has property cardPayment with default value false, indication the cardPayment facility is OFF. If you want cardPayment available to your users then set cardPayment option to true while creating config object. Please read merchant terms and conditions before enabling this feature.\nAdditionally, Config class also accepts a Dictionary  which you can use to pass any additional data. Make sure you add a  merchant_  prefix in your map key.",
            "title": "Example as used in Example Project"
        },
        {
            "location": "/checkout/ios/#using-delegates",
            "text": "The viewController you implement pay action should contain KhaltiPayDelegate implementing\n  onCheckOutSuccess(data: Dictionary<String, Any>) \n  onCheckOutError(action: String, message: String)  extension YourViewController: KhaltiPayDelegate {\n    func onCheckOutSuccess(data: Dictionary<String, Any>) {\n        print(data)\n        print(\"Oh there is success message received\")\n    }\n\n    func onCheckOutError(action: String, message: String) {\n        print(action)\n        print(message)\n        print(\"Oh there occure error in payment\")\n    }\n}",
            "title": "Using delegates"
        },
        {
            "location": "/checkout/ios/#summary",
            "text": "",
            "title": "Summary"
        },
        {
            "location": "/checkout/ios/#callback-methods",
            "text": "Method  Description      onCheckOutSuccess(data: Dictionary<String, Any>)  This method is called when a transaction has been completed and confirmed by the user. A dictionary containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the  verification  process for further instructions.    onCheckOutError(action: String, message: String, data:Dictionary<String,Any>?)  This method is called when an error occurs during payment initiation and confirmation. Action, message and errordata value is passed where action defines, the current action being performed, message defines the error and data defines the errorData associated with error if exists.",
            "title": "Callback Methods"
        },
        {
            "location": "/checkout/ios/#response-sample",
            "text": "",
            "title": "Response Sample"
        },
        {
            "location": "/checkout/ios/#success-messsage",
            "text": "Key  Value  Type      mobile  98XXXXXXXX  String    product_name  Product Name  String    product_identity  Product Id  String    product_url  Product Url  String    amount  100  Int    token  token  String    cardPayment  false  Bool     The success message also contains all the  key  and  value  provide as extra data while initiating  Config .",
            "title": "Success Messsage"
        },
        {
            "location": "/checkout/ios/#error-messsage",
            "text": "Variable  Description  Type      action  initiate/confirm/ebanking  String    message  Detail Error Message  String    data  data of error   (Optional)  Dictionary ?",
            "title": "Error Messsage"
        },
        {
            "location": "/checkout/ios/#support",
            "text": "For Queries, feel free to call us at:  Mobile : 9801165568\nViber/Whatsapp/Skype ID: 9801165568\nEmail:  merchant@khalti.com  Check out the  API Documentation .  And you can study the source code on  github   by yourself.",
            "title": "Support"
        },
        {
            "location": "/checkout/prestashop/",
            "text": "Prestashop\n\n\nStay Tuned. Work-in-progress.\n\n\nCheck out the source for \nKhalti plugin on Github\n.",
            "title": "Prestashop"
        },
        {
            "location": "/checkout/prestashop/#prestashop",
            "text": "Stay Tuned. Work-in-progress.  Check out the source for  Khalti plugin on Github .",
            "title": "Prestashop"
        },
        {
            "location": "/checkout/diy-wallet/",
            "text": "Introduction\n\n\nRead this documentation only if you plan to implement\nyour own SDK instead of using the ones provided by Khalti.\n\n\nIf you are not sure about that, please check our SDK for\nAndroid, iOS and Web platforms.\n\n\nBefore starting out, read the rest of the documentation at\n\nhttp://docs.khalti.com\n to understand\nthe basic workflow of the merchant API.\n\n\nAPI\n\n\n1. Initiate transaction\n\n\nAs the title says, this API is called to initiates the transaction.\n\n\nE.g. When the user clicks \nCheckout\n button, you will need to\nprompt for their Khalti registered mobile number, and call this API once\nthe payer submits.\n\n\nThe request signature for initiation is as follows:\n\n\n\n\nURL: \nhttps://khalti.com/api/payment/initiate/\n\n\nMethod: \nPOST\n\n\nData:\n\n\npublic_key\n: Required. Either \ntest\n or \nlive\n public key.\n\n\nmobile\n: Required. The Khalti registered mobile number of payer.\n\n\namount\n: Required. The amount value of payment. Needs to be in paisa.\n\n\nproduct_identity\n: Required. A string to identify the product.\n\n\nproduct_name\n: Required. Descriptive name for the product.\n\n\n\n\nAdditional information about the product can be passed along with this\nfor reporting purposes. The keys for additional data must be prefixed\nwith \nmerchant_\n.\n\n\nA sample request adhering to the above signature will look something like this:\n\n\n{\n  \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\",\n  \"mobile\": \"9842XXXXXX\",\n  \"amount\": 10000,\n  \"product_identity\": \"book/id-120\",\n  \"product_name\": \"A Song of Ice and Fire\"\n}\n\n\n\n\nThe response will be something like this:\n\n\n{\n  \"token\": \"BVNKCiLZhZipkMGws5hgS8\",\n  \"pin_created\": true,\n  \"pin_created_message\": \"Your third party transaction pin has been generated and sent to your mobile number.\"\n}\n\n\n\n\nThe response will contain \npin_created\n and \npin_created_message\n if this is\nthe user's first ever third party transaction. You should display the message\nif \npin_created = true\n and ignore it otherwise.\n\n\nIf the user's pin has already been created, the response will look like this:\n\n\n{\n  \"token\": \"VGMyaKVDQQyorBiQ3W99WL\",\n  \"pin_created\": false,\n  \"pin_created_message\": \"\"\n}\n\n\n\n\n2. Confirm transaction\n\n\nIn this step, you will need to prompt the user for the OTP (One Time Password),\nand their 3rd party transaction pin. Once those details are submitted, the\nrequest to verify trnasaction should be made like this:\n\n\nThe value in \ntoken\n key from the response in previous step is required\nto verify the transaction.\n\n\nRequest signature:\n\n\n\n\nURL: \nhttps://khalti.com/api/payment/confirm/\n\n\nMethod: \nPOST\n\n\nData:\n\n\npublic_key\n: Required. Should be same as the key used for transaction initiation.\n\n\ntoken\n: Required. Transaction initiation token.\n\n\nconfirmation_code\n: Required. OTP submitted by the user.\n\n\ntransaction_pin\n: Required. Third party transaction pin submitted by the user.\n\n\n\n\nA sample request adhering to above signature will look like this:\n\n\n{\n\"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\",\n\"token\": \"VGMyaKVDQQyorBiQ3W99WL\",\n\"confirmation_code\": \"206964\",\n\"transaction_pin\": \"4791\"\n}\n\n\n\n\n\nA successful request will yield a response that looks something like this:\n\n\n{\n  \"token\": \"VGMyaKVDQQyorBiQ3W99WL\",\n  \"amount\": 10000,\n  \"mobile\": \"98XXXXX099\",\n  \"product_identity\": \"book/id-120\",\n  \"product_name\": \"A Song of Ice and Fire\"\n}\n\n\n\n\n3. Verify transaction\n\n\nThe API requests mentioned in previous steps are to be made from the\nclient side i.e. from the front-end. Once those steps are complete, you \nneed to make a verification request using your secret key from the server.\n\n\nSee \nhttp://docs.khalti.com/api/verification/\n\nfor more information on how to verify the transaction.\n\n\nNotes\n\n\n\n\nInitiate and verify api requests should be made from the front-end.\n\n\nIf the transaction initiation API response has \npin_created = true\n,\n   you must display the content of \npin_created_message\n key in that response\n   to the user.",
            "title": "Wallet"
        },
        {
            "location": "/checkout/diy-wallet/#introduction",
            "text": "Read this documentation only if you plan to implement\nyour own SDK instead of using the ones provided by Khalti.  If you are not sure about that, please check our SDK for\nAndroid, iOS and Web platforms.  Before starting out, read the rest of the documentation at http://docs.khalti.com  to understand\nthe basic workflow of the merchant API.",
            "title": "Introduction"
        },
        {
            "location": "/checkout/diy-wallet/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/checkout/diy-wallet/#1-initiate-transaction",
            "text": "As the title says, this API is called to initiates the transaction.  E.g. When the user clicks  Checkout  button, you will need to\nprompt for their Khalti registered mobile number, and call this API once\nthe payer submits.  The request signature for initiation is as follows:   URL:  https://khalti.com/api/payment/initiate/  Method:  POST  Data:  public_key : Required. Either  test  or  live  public key.  mobile : Required. The Khalti registered mobile number of payer.  amount : Required. The amount value of payment. Needs to be in paisa.  product_identity : Required. A string to identify the product.  product_name : Required. Descriptive name for the product.   Additional information about the product can be passed along with this\nfor reporting purposes. The keys for additional data must be prefixed\nwith  merchant_ .  A sample request adhering to the above signature will look something like this:  {\n  \"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\",\n  \"mobile\": \"9842XXXXXX\",\n  \"amount\": 10000,\n  \"product_identity\": \"book/id-120\",\n  \"product_name\": \"A Song of Ice and Fire\"\n}  The response will be something like this:  {\n  \"token\": \"BVNKCiLZhZipkMGws5hgS8\",\n  \"pin_created\": true,\n  \"pin_created_message\": \"Your third party transaction pin has been generated and sent to your mobile number.\"\n}  The response will contain  pin_created  and  pin_created_message  if this is\nthe user's first ever third party transaction. You should display the message\nif  pin_created = true  and ignore it otherwise.  If the user's pin has already been created, the response will look like this:  {\n  \"token\": \"VGMyaKVDQQyorBiQ3W99WL\",\n  \"pin_created\": false,\n  \"pin_created_message\": \"\"\n}",
            "title": "1. Initiate transaction"
        },
        {
            "location": "/checkout/diy-wallet/#2-confirm-transaction",
            "text": "In this step, you will need to prompt the user for the OTP (One Time Password),\nand their 3rd party transaction pin. Once those details are submitted, the\nrequest to verify trnasaction should be made like this:  The value in  token  key from the response in previous step is required\nto verify the transaction.  Request signature:   URL:  https://khalti.com/api/payment/confirm/  Method:  POST  Data:  public_key : Required. Should be same as the key used for transaction initiation.  token : Required. Transaction initiation token.  confirmation_code : Required. OTP submitted by the user.  transaction_pin : Required. Third party transaction pin submitted by the user.   A sample request adhering to above signature will look like this:  {\n\"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\",\n\"token\": \"VGMyaKVDQQyorBiQ3W99WL\",\n\"confirmation_code\": \"206964\",\n\"transaction_pin\": \"4791\"\n}  A successful request will yield a response that looks something like this:  {\n  \"token\": \"VGMyaKVDQQyorBiQ3W99WL\",\n  \"amount\": 10000,\n  \"mobile\": \"98XXXXX099\",\n  \"product_identity\": \"book/id-120\",\n  \"product_name\": \"A Song of Ice and Fire\"\n}",
            "title": "2. Confirm transaction"
        },
        {
            "location": "/checkout/diy-wallet/#3-verify-transaction",
            "text": "The API requests mentioned in previous steps are to be made from the\nclient side i.e. from the front-end. Once those steps are complete, you \nneed to make a verification request using your secret key from the server.  See  http://docs.khalti.com/api/verification/ \nfor more information on how to verify the transaction.",
            "title": "3. Verify transaction"
        },
        {
            "location": "/checkout/diy-wallet/#notes",
            "text": "Initiate and verify api requests should be made from the front-end.  If the transaction initiation API response has  pin_created = true ,\n   you must display the content of  pin_created_message  key in that response\n   to the user.",
            "title": "Notes"
        },
        {
            "location": "/checkout/diy-ebanking/",
            "text": "Introduction\n\n\nWIP",
            "title": "Ebanking"
        },
        {
            "location": "/checkout/diy-ebanking/#introduction",
            "text": "WIP",
            "title": "Introduction"
        },
        {
            "location": "/api/verification/",
            "text": "Introduction\n\n\nWhenever your customer pays using the Khalti widget, the client side\nmakes a request to the Khalti server to initiate and confirm the\npayment.\n\n\nOnce they've confirmed the payment, the client will receive a response\ncontaining unique token and amount for that particular transaction.\nUpon receiving the transaction token, the client will make a request\nto your server with the token and the payment amount.\n\n\nOn the next step, you will need to ask the Khalti server to verify the\ninformation relayed by the user before completing their purchase\norder.\n\n\nWhy is server-to-server verification necessary?\n\n\nSince the client side makes the payment directly to Khalti without\ngoing through your server first, you need to be sure that the customer\nactually paid the money they were supposed to before completing their\norder. This type of verification can only be done securely from the\nserver.\n\n\nVerification request\n\n\nYour application server must do a \nPOST\n request to Khalti server for\nthe final step of the payment process. The structure of the request as\nexpected by Khalti server is as follows.\n\n\n\n\nurl\n: \nhttps://khalti.com/api/v2/payment/verify/\n\n\nmethod\n: \nPOST\n\n\nheaders\n:\n\n\nAuthorization\n: test or live secret key in the form \nKey <secret key>\n\n\n\n\n\n\npayload\n:\n\n\ntoken\n: Token given by Khalti after payment confirmation.\n\n\namount\n: Amount (in paisa) with which payment was initiated.\n\n\n\n\n\n\n\n\nVerification response\n\n\nOnce you've made a request as specified above, Khalti server will\nreturn you a response in the following format.\n\n\nSuccess\n: Success response consists of the idx of transaction created.\n\n\n{'idx': 'ymYXHiG2dYSGk1w7s2SghM'}\n\n\n\n\nError\n: Error response consists of the detail of errors.\n\n\n{'token': ['Invalid token.']}\n\n\n\n\nExamples\n\n\nAssuming the token that we received is \nQUao9cqFzxPgvWJNi9aKac\n.\n\n\nCURL\n\n\ncurl https://khalti.com/api/v2/payment/verify/ \\\n   -H \"Authorization:Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" \\\n   -d amount=1000 \\\n   -d token=QUao9cqFzxPgvWJNi9aKac\n\n\n\n\nPHP\n\n\n$args = http_build_query(array(\n    'token' => 'QUao9cqFzxPgvWJNi9aKac',\n    'amount'  => 1000\n));\n\n$url = \"https://khalti.com/api/v2/payment/verify/\";\n\n# Make the call using API.\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS,$args);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n$headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n// Response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\n\n\n\n\n\nPython\n\n\nimport requests\n\nurl = \"https://khalti.com/api/v2/payment/verify/\"\npayload = {\n  \"token\": \"QUao9cqFzxPgvWJNi9aKac\",\n  \"amount\": 1000\n}\nheaders = {\n  \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\"\n}\n\nresponse = requests.post(url, payload, headers = headers)\n\n\n\n\nRuby\n\n\nrequire 'uri'\nrequire 'net/http'\n\nheaders = {\n  Authorization: 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'\n}\nuri = URI.parse('https://khalti.com/api/v2/payment/verify/')\nhttps = Net::HTTP.new(uri.host, uri.port)\nhttps.use_ssl = true\nrequest = Net::HTTP::Post.new(uri.request_uri, headers)\nrequest.set_form_data('token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000)\nresponse = https.request(request)\n\nputs response.body\n\n\n\n\nNode\n\n\nInstall \naxios\n by running \nyarn install axios\n.\n\n\nconst axios = require('axios');\n\nlet data = {\n    \"token\": \"QUao9cqFzxPgvWJNi9aKac\",\n    \"amount\": 1000\n};\n\nlet config = {\n    headers: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'}\n};\n\naxios.post(\"https://khalti.com/api/v2/payment/verify/\", data, config)\n    .then(response => {\n        console.log(response.data);\n    })\n    .catch(error => {\n        console.log(error);\n    });",
            "title": "Verification"
        },
        {
            "location": "/api/verification/#introduction",
            "text": "Whenever your customer pays using the Khalti widget, the client side\nmakes a request to the Khalti server to initiate and confirm the\npayment.  Once they've confirmed the payment, the client will receive a response\ncontaining unique token and amount for that particular transaction.\nUpon receiving the transaction token, the client will make a request\nto your server with the token and the payment amount.  On the next step, you will need to ask the Khalti server to verify the\ninformation relayed by the user before completing their purchase\norder.",
            "title": "Introduction"
        },
        {
            "location": "/api/verification/#why-is-server-to-server-verification-necessary",
            "text": "Since the client side makes the payment directly to Khalti without\ngoing through your server first, you need to be sure that the customer\nactually paid the money they were supposed to before completing their\norder. This type of verification can only be done securely from the\nserver.",
            "title": "Why is server-to-server verification necessary?"
        },
        {
            "location": "/api/verification/#verification-request",
            "text": "Your application server must do a  POST  request to Khalti server for\nthe final step of the payment process. The structure of the request as\nexpected by Khalti server is as follows.   url :  https://khalti.com/api/v2/payment/verify/  method :  POST  headers :  Authorization : test or live secret key in the form  Key <secret key>    payload :  token : Token given by Khalti after payment confirmation.  amount : Amount (in paisa) with which payment was initiated.",
            "title": "Verification request"
        },
        {
            "location": "/api/verification/#verification-response",
            "text": "Once you've made a request as specified above, Khalti server will\nreturn you a response in the following format.  Success : Success response consists of the idx of transaction created.  {'idx': 'ymYXHiG2dYSGk1w7s2SghM'}  Error : Error response consists of the detail of errors.  {'token': ['Invalid token.']}",
            "title": "Verification response"
        },
        {
            "location": "/api/verification/#examples",
            "text": "Assuming the token that we received is  QUao9cqFzxPgvWJNi9aKac .",
            "title": "Examples"
        },
        {
            "location": "/api/verification/#curl",
            "text": "curl https://khalti.com/api/v2/payment/verify/ \\\n   -H \"Authorization:Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" \\\n   -d amount=1000 \\\n   -d token=QUao9cqFzxPgvWJNi9aKac",
            "title": "CURL"
        },
        {
            "location": "/api/verification/#php",
            "text": "$args = http_build_query(array(\n    'token' => 'QUao9cqFzxPgvWJNi9aKac',\n    'amount'  => 1000\n));\n\n$url = \"https://khalti.com/api/v2/payment/verify/\";\n\n# Make the call using API.\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS,$args);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n$headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n// Response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);",
            "title": "PHP"
        },
        {
            "location": "/api/verification/#python",
            "text": "import requests\n\nurl = \"https://khalti.com/api/v2/payment/verify/\"\npayload = {\n  \"token\": \"QUao9cqFzxPgvWJNi9aKac\",\n  \"amount\": 1000\n}\nheaders = {\n  \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\"\n}\n\nresponse = requests.post(url, payload, headers = headers)",
            "title": "Python"
        },
        {
            "location": "/api/verification/#ruby",
            "text": "require 'uri'\nrequire 'net/http'\n\nheaders = {\n  Authorization: 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'\n}\nuri = URI.parse('https://khalti.com/api/v2/payment/verify/')\nhttps = Net::HTTP.new(uri.host, uri.port)\nhttps.use_ssl = true\nrequest = Net::HTTP::Post.new(uri.request_uri, headers)\nrequest.set_form_data('token' => 'QUao9cqFzxPgvWJNi9aKac', 'amount' => 1000)\nresponse = https.request(request)\n\nputs response.body",
            "title": "Ruby"
        },
        {
            "location": "/api/verification/#node",
            "text": "Install  axios  by running  yarn install axios .  const axios = require('axios');\n\nlet data = {\n    \"token\": \"QUao9cqFzxPgvWJNi9aKac\",\n    \"amount\": 1000\n};\n\nlet config = {\n    headers: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'}\n};\n\naxios.post(\"https://khalti.com/api/v2/payment/verify/\", data, config)\n    .then(response => {\n        console.log(response.data);\n    })\n    .catch(error => {\n        console.log(error);\n    });",
            "title": "Node"
        },
        {
            "location": "/api/transaction/",
            "text": "Khalti provides API for retrieving list of payments made to a merchant.\nA merchant should use secret test and live keys for retrieving test and live payments respectively.\n\n\nList of transactions can also be viewed after logging on \nKhalti website\n with merchant account.\n\n\nReplace \n<secret key>\n with test or live secret key as per required.\n\n\nResponse\n is paginated and in the following format:\n\n\n{\n  \"total_pages\": 1,\n  \"total_records\": 2,\n  \"next\": null,\n  \"previous\": null,\n  \"record_range\": [\n    1,\n    2\n  ],\n  \"current_page\": 1,\n  \"records\": [\n    {\n      \"idx\": \"vXaHQXJd6Ke79By9dTHsVe\",\n      \"type\": \"Wallet payment\",\n      \"state\": \"Confirmed\",\n      \"amount\": 1000,\n      \"fee_amount\": 30,\n      \"created_on\": \"2017-11-19T11:17:53.763052+05:45\",\n      \"source\": \"98XXXXX969\"\n    },\n    {\n      \"idx\": \"ymYXHiG2dYSGkxw7s2SghM\",\n      \"type\": \"Wallet payment\",\n      \"state\": \"Completed\",\n      \"amount\": 1000,\n      \"fee_amount\": 30,\n      \"created_on\": \"2017-11-19T11:21:39.646256+05:45\",\n      \"source\": \"98XXXXX969\"\n    }\n  ]\n}\n\n\n\n\nList payments\n\n\nCURL\n\n\ncurl https://khalti.com/api/v2/merchant-transaction/ -H \"Authorization:Key <secret key>\n\n\n\n\nPHP\n\n\n$url = \"https://khalti.com/api/v2/merchant-transaction/\";\n\n# Make the call using API.\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n$headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n// Response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\n\n\n\n\n\nPython\n\n\nimport requests\n\nurl = \"https://khalti.com/api/v2/merchant-transaction/\"\npayload = {}\nheaders = {\n  \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\"\n}\n\nresponse = requests.get(url, payload, headers = headers)\n\n\n\n\nRuby\n\n\nrequire 'uri'\nrequire 'net/http'\n\nheaders = {\n  Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\"\n}\nuri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/\")\nhttps = Net::HTTP.new(uri.host, uri.port)\nhttps.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri, headers)\nresponse = https.request(request)\n\nputs response.body\n\n\n\n\nRetrieve payment\n\n\nCURL\n\n\ncurl https://khalti.com/api/v2/merchant-transaction/<idx>/ -H \"Authorization:Key <secret key>\n\n\n\n\nPHP\n\n\n\n$url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\";\n\n# Make the call using API.\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n$headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n// Response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\n\n\n\n\n\nPython\n\n\nimport requests\n\nurl = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\"\nheaders = {\n  \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\"\n}\n\nresponse = requests.get(url, headers = headers)\n\n\n\n\nRuby\n\n\nrequire 'uri'\nrequire 'net/http'\n\nheaders = {\n  Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\"\n}\nuri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/<idx>/\")\nhttps = Net::HTTP.new(uri.host, uri.port)\nhttps.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri, headers)\nresponse = https.request(request)\n\nputs response.body",
            "title": "Transaction"
        },
        {
            "location": "/api/transaction/#list-payments",
            "text": "",
            "title": "List payments"
        },
        {
            "location": "/api/transaction/#curl",
            "text": "curl https://khalti.com/api/v2/merchant-transaction/ -H \"Authorization:Key <secret key>",
            "title": "CURL"
        },
        {
            "location": "/api/transaction/#php",
            "text": "$url = \"https://khalti.com/api/v2/merchant-transaction/\";\n\n# Make the call using API.\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n$headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n// Response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);",
            "title": "PHP"
        },
        {
            "location": "/api/transaction/#python",
            "text": "import requests\n\nurl = \"https://khalti.com/api/v2/merchant-transaction/\"\npayload = {}\nheaders = {\n  \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\"\n}\n\nresponse = requests.get(url, payload, headers = headers)",
            "title": "Python"
        },
        {
            "location": "/api/transaction/#ruby",
            "text": "require 'uri'\nrequire 'net/http'\n\nheaders = {\n  Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\"\n}\nuri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/\")\nhttps = Net::HTTP.new(uri.host, uri.port)\nhttps.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri, headers)\nresponse = https.request(request)\n\nputs response.body",
            "title": "Ruby"
        },
        {
            "location": "/api/transaction/#retrieve-payment",
            "text": "",
            "title": "Retrieve payment"
        },
        {
            "location": "/api/transaction/#curl_1",
            "text": "curl https://khalti.com/api/v2/merchant-transaction/<idx>/ -H \"Authorization:Key <secret key>",
            "title": "CURL"
        },
        {
            "location": "/api/transaction/#php_1",
            "text": "$url = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\";\n\n# Make the call using API.\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n$headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n// Response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);",
            "title": "PHP"
        },
        {
            "location": "/api/transaction/#python_1",
            "text": "import requests\n\nurl = \"https://khalti.com/api/v2/merchant-transaction/<idx>/\"\nheaders = {\n  \"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\"\n}\n\nresponse = requests.get(url, headers = headers)",
            "title": "Python"
        },
        {
            "location": "/api/transaction/#ruby_1",
            "text": "require 'uri'\nrequire 'net/http'\n\nheaders = {\n  Authorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\"\n}\nuri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/<idx>/\")\nhttps = Net::HTTP.new(uri.host, uri.port)\nhttps.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri, headers)\nresponse = https.request(request)\n\nputs response.body",
            "title": "Ruby"
        },
        {
            "location": "/contribution/",
            "text": "Introduction\n\n\nContributions are always welcome. Also, if you have any confusion,\nplease feel free to create an issue.\n\n\nKey information\n\n\n\n\nThe documentation source files are inside \ncontent/\n directory.\n\n\nThe source files are written in \nMarkdown\n.\n\n\nThe HTML documentation site is built using \nmkdocs\n,\n  a Python package to build documentation.\n\n\n\n\nHow to contribute\n\n\nFork it, clone it\n\n\nFork the \ndocs repo\n by using the\nGithub interface.\n\n\nClone that fork into your development machine.\n\n\ngit clone git@github.com:<YOUR_USERNAME>/khalti-docs-official-repo.git\n\n\n\n\nLocally building and serving\n\n\nInstall \nmkdocs\n using any of the methods specified in the\n\nofficial documentation\n.\n\n\nTo serve the docs locally, run:\n\n\nmkdocs serve\n\n\n\n\nThis will build and host the \n.md\n files in \nhttp://localhost:8000\n. It will also\nlive reload the page when you make changes in the source files.\n\n\nPushing changes\n\n\nOnce you've made necessary changes, push it to your forked repository by running:\n\n\ngit push origin master\n\n\n\n\nAfter you've done this, you need to ask us to merge your changes to the main repo.\nGithub provides pull request feature to accomplish that.\n\n\nGo to the \npull requests\n\ntab of the main repo.\n\n\nYou'll notice a big green, \nNew pull request\n button on the top right side of the\npage. Click on that button and follow from there.\nYour pull request will be reviewed and merged by one of Khalti development staff.",
            "title": "Contribution"
        },
        {
            "location": "/contribution/#introduction",
            "text": "Contributions are always welcome. Also, if you have any confusion,\nplease feel free to create an issue.",
            "title": "Introduction"
        },
        {
            "location": "/contribution/#key-information",
            "text": "The documentation source files are inside  content/  directory.  The source files are written in  Markdown .  The HTML documentation site is built using  mkdocs ,\n  a Python package to build documentation.",
            "title": "Key information"
        },
        {
            "location": "/contribution/#how-to-contribute",
            "text": "",
            "title": "How to contribute"
        },
        {
            "location": "/contribution/#fork-it-clone-it",
            "text": "Fork the  docs repo  by using the\nGithub interface.  Clone that fork into your development machine.  git clone git@github.com:<YOUR_USERNAME>/khalti-docs-official-repo.git",
            "title": "Fork it, clone it"
        },
        {
            "location": "/contribution/#locally-building-and-serving",
            "text": "Install  mkdocs  using any of the methods specified in the official documentation .  To serve the docs locally, run:  mkdocs serve  This will build and host the  .md  files in  http://localhost:8000 . It will also\nlive reload the page when you make changes in the source files.",
            "title": "Locally building and serving"
        },
        {
            "location": "/contribution/#pushing-changes",
            "text": "Once you've made necessary changes, push it to your forked repository by running:  git push origin master  After you've done this, you need to ask us to merge your changes to the main repo.\nGithub provides pull request feature to accomplish that.  Go to the  pull requests \ntab of the main repo.  You'll notice a big green,  New pull request  button on the top right side of the\npage. Click on that button and follow from there.\nYour pull request will be reviewed and merged by one of Khalti development staff.",
            "title": "Pushing changes"
        }
    ]
}